{"ast":null,"code":"var _jsxFileName = \"/Users/wangchenhui/Desktop/final_project_belay/react/src/components/ChannelList.jsx\",\n  _s = $RefreshSig$();\n// // ChannelList.jsx\n// import React, { useState, useEffect } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import '../styles/channelList.css';\n\n// function ChannelList() {\n//   const [channels, setChannels] = useState([]);\n\n//   useEffect(() => {\n//     fetchChannels();\n//   }, []);\n\n//   const fetchChannels = async () => {\n//     try {\n//       const response = await fetch('http://127.0.0.1:5000/api/channels', {\n//         method: 'GET',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//       });\n//       const data = await response.json();\n//       if (data.Success) {\n//         setChannels(data.channels);\n//       } else {\n//         console.log('Display failed');\n//       }\n//     } catch (error) {\n//       console.error('Error during display channels:', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"channel-list\">\n//       {channels.map(channel => (\n//         <div key={channel.id} className=\"channel\">\n//           {channel.name}\n//         </div>\n//       ))}\n//     </div>\n//   );\n// }\n\n// export default ChannelList;\n\n// ChannelList.jsx\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChannelList() {\n  _s();\n  const [channels, setChannels] = useState([]);\n  let navigate = useNavigate(); // 使用useNavigate钩子\n\n  useEffect(() => {\n    fetchChannels();\n  }, []);\n  const fetchChannels = async () => {\n    // Fetch逻辑...\n  };\n  const handleChannelClick = channelName => {\n    // 导航到/channel/:channelName\n    navigate(`/channel/${channelName}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"channel-list\",\n    children: channels.map(channel => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"channel\",\n      onClick: () => handleChannelClick(channel.name),\n      children: channel.name\n    }, channel.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(ChannelList, \"Aq8dWs62IkvJxgL9D0JrJaCtcfg=\", false, function () {\n  return [useNavigate];\n});\n_c = ChannelList;\nexport default ChannelList;\nvar _c;\n$RefreshReg$(_c, \"ChannelList\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","ChannelList","_s","channels","setChannels","navigate","fetchChannels","handleChannelClick","channelName","className","children","map","channel","onClick","name","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/wangchenhui/Desktop/final_project_belay/react/src/components/ChannelList.jsx"],"sourcesContent":["// // ChannelList.jsx\n// import React, { useState, useEffect } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import '../styles/channelList.css';\n\n// function ChannelList() {\n//   const [channels, setChannels] = useState([]);\n\n//   useEffect(() => {\n//     fetchChannels();\n//   }, []);\n\n//   const fetchChannels = async () => {\n//     try {\n//       const response = await fetch('http://127.0.0.1:5000/api/channels', {\n//         method: 'GET',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//       });\n//       const data = await response.json();\n//       if (data.Success) {\n//         setChannels(data.channels);\n//       } else {\n//         console.log('Display failed');\n//       }\n//     } catch (error) {\n//       console.error('Error during display channels:', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"channel-list\">\n//       {channels.map(channel => (\n//         <div key={channel.id} className=\"channel\">\n//           {channel.name}\n//         </div>\n//       ))}\n//     </div>\n//   );\n// }\n\n// export default ChannelList;\n\n\n// ChannelList.jsx\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nfunction ChannelList() {\n  const [channels, setChannels] = useState([]);\n  let navigate = useNavigate(); // 使用useNavigate钩子\n\n  useEffect(() => {\n    fetchChannels();\n  }, []);\n\n  const fetchChannels = async () => {\n    // Fetch逻辑...\n  };\n\n  const handleChannelClick = (channelName) => {\n    // 导航到/channel/:channelName\n    navigate(`/channel/${channelName}`);\n  };\n\n  return (\n    <div className=\"channel-list\">\n      {channels.map(channel => (\n        <div key={channel.id} className=\"channel\" onClick={() => handleChannelClick(channel.name)}>\n          {channel.name}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default ChannelList;\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,IAAIS,QAAQ,GAAGP,WAAW,CAAC,CAAC,CAAC,CAAC;;EAE9BD,SAAS,CAAC,MAAM;IACdS,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC;EAAA,CACD;EAED,MAAMC,kBAAkB,GAAIC,WAAW,IAAK;IAC1C;IACAH,QAAQ,CAAE,YAAWG,WAAY,EAAC,CAAC;EACrC,CAAC;EAED,oBACER,OAAA;IAAKS,SAAS,EAAC,cAAc;IAAAC,QAAA,EAC1BP,QAAQ,CAACQ,GAAG,CAACC,OAAO,iBACnBZ,OAAA;MAAsBS,SAAS,EAAC,SAAS;MAACI,OAAO,EAAEA,CAAA,KAAMN,kBAAkB,CAACK,OAAO,CAACE,IAAI,CAAE;MAAAJ,QAAA,EACvFE,OAAO,CAACE;IAAI,GADLF,OAAO,CAACG,EAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEf,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACjB,EAAA,CA1BQD,WAAW;EAAA,QAEHH,WAAW;AAAA;AAAAsB,EAAA,GAFnBnB,WAAW;AA4BpB,eAAeA,WAAW;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}