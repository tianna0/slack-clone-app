{"ast":null,"code":"// MessageThread.jsx\nimport React,{useEffect,useState}from'react';import{useNavigate}from'react-router-dom';import{useParams}from'react-router-dom';import'../styles/lastReply.css';import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";function LastReply(){// const navigate = useNavigate();\nconst userid=sessionStorage.getItem(\"user_id\");const{channelId,messageId}=useParams();const[replies,setReplies]=useState([]);useEffect(()=>{fetchReplies();// Set up an interval to fetch messages every 500ms\nconst intervalId=setInterval(fetchReplies,5000);// Cleanup function to clear the interval when the component unmounts\n// or if the channelId changes\nreturn()=>clearInterval(intervalId);},[messageId]);const fetchReplies=async()=>{try{const response=await fetch(\"http://127.0.0.1:5000/api/channels/\".concat(channelId,\"/messages/\").concat(messageId,\"/get\"),{method:'GET',headers:{'Content-Type':'application/json'}});const data=await response.json();if(data.Success){console.log(\"replies: \",data.replies);setReplies(data.replies);}else{console.log('Failed to fetch replies');}}catch(error){console.error('Error fetching replies:',error);}};const reactionTrack=async(emoji,replyMessageId)=>{try{const response=await fetch(\"http://127.0.0.1:5000/api/reactions/post\",{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({user_id:userid,message_id:replyMessageId,emoji:emoji})});const data=await response.json();if(data.Success){console.log(\"Reactions stored successfully: \",data.error);}else{console.log(\"Failed to save reactions\");}}catch(error){console.error('Error saving reactions: ',error);}};return/*#__PURE__*/_jsx(\"div\",{className:\"reply-thread\",children:replies.length>0?replies.map(reply=>/*#__PURE__*/_jsxs(\"div\",{className:\"reply\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"reply-details\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"reply-author\",children:[reply.author,\":\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"reply-content\",children:reply.content}),/*#__PURE__*/_jsx(\"div\",{className:\"replies-emojis-container\",children:/*#__PURE__*/_jsx(\"div\",{className:\"replies-emojis-left\",children:reply.emojis.map((emoji,index)=>/*#__PURE__*/_jsx(\"span\",{className:\"emoji\",children:emoji},index))})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"reply-emojis\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"emoji\",onClick:()=>reactionTrack(\"ðŸ¤¯\",reply.id),children:\"\\uD83E\\uDD2F\"}),/*#__PURE__*/_jsx(\"button\",{className:\"emoji\",onClick:()=>reactionTrack(\"ðŸ‘¿\",reply.id),children:\"\\uD83D\\uDC7F\"})]})]},reply.id)):/*#__PURE__*/_jsx(\"h3\",{children:\"No replies in this thread\"})});}export default LastReply;","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useParams","jsxs","_jsxs","jsx","_jsx","LastReply","userid","sessionStorage","getItem","channelId","messageId","replies","setReplies","fetchReplies","intervalId","setInterval","clearInterval","response","fetch","concat","method","headers","data","json","Success","console","log","error","reactionTrack","emoji","replyMessageId","body","JSON","stringify","user_id","message_id","className","children","length","map","reply","author","content","emojis","index","onClick","id"],"sources":["/Users/wangchenhui/Desktop/final_project_belay/react/src/components/LastReply.jsx"],"sourcesContent":["// MessageThread.jsx\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useParams } from 'react-router-dom';\nimport '../styles/lastReply.css';\n\nfunction LastReply() {\n  // const navigate = useNavigate();\n  const userid = sessionStorage.getItem(\"user_id\");\n  const { channelId, messageId } = useParams(); \n  const [replies, setReplies] = useState([]); \n\n  useEffect(() => {\n    fetchReplies();\n\n    // Set up an interval to fetch messages every 500ms\n    const intervalId = setInterval(fetchReplies, 5000);\n\n    // Cleanup function to clear the interval when the component unmounts\n    // or if the channelId changes\n    return () => clearInterval(intervalId);\n  }, [messageId]); \n\n\n  const fetchReplies = async () => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/api/channels/${channelId}/messages/${messageId}/get`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      const data = await response.json();\n      if (data.Success) {\n        console.log(\"replies: \", data.replies)\n        setReplies(data.replies); \n      } else {\n        console.log('Failed to fetch replies');\n      }\n    } catch (error) {\n      console.error('Error fetching replies:', error);\n    }\n  };\n\n  const reactionTrack = async (emoji, replyMessageId) => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/api/reactions/post`,{\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          user_id: userid,\n          message_id: replyMessageId,\n          emoji: emoji\n        }),\n      });\n      const data = await response.json();\n      if (data.Success) {\n        console.log(\"Reactions stored successfully: \", data.error);\n      } else {\n        console.log(\"Failed to save reactions\")\n      }\n    } catch (error) {\n      console.error('Error saving reactions: ', error);\n    }\n  };\n\n  return (\n    <div className=\"reply-thread\">\n      {replies.length > 0 ? (\n        replies.map((reply) => (\n          <div key={reply.id} className=\"reply\">\n            <div className=\"reply-details\">\n              <div className=\"reply-author\">{reply.author}:</div>\n              <div className=\"reply-content\">{reply.content}</div>\n              <div className=\"replies-emojis-container\">\n                <div className=\"replies-emojis-left\">\n                  {reply.emojis.map((emoji, index) => (\n                    <span key={index} className=\"emoji\">{emoji}</span>\n                  ))}\n                </div>\n              </div>\n            </div>\n            <div className=\"reply-emojis\">\n              <button className='emoji' onClick={() => reactionTrack(\"ðŸ¤¯\", reply.id)}>ðŸ¤¯</button>\n              <button className='emoji' onClick={() => reactionTrack(\"ðŸ‘¿\", reply.id)}>ðŸ‘¿</button>\n            </div>\n          </div>\n        ))\n      ) : (\n        <h3>No replies in this thread</h3>\n      )}\n    </div>\n  );\n}\n\nexport default LastReply;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}