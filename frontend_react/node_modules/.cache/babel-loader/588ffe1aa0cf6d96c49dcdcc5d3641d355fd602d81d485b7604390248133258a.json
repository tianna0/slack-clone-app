{"ast":null,"code":"// ChannelList.jsx\nimport React,{useState,useEffect}from'react';import{useNavigate}from'react-router-dom';import'../styles/channelList.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function ChannelList(){const[channels,setChannels]=useState([]);const[currentChannelId,setCurrentChannelId]=useState(null);let navigate=useNavigate();const userid=sessionStorage.getItem(\"user_id\");const[unreadMessageCounts,setUnreadMessageCounts]=useState({});useEffect(()=>{fetchChannels();fetchUnreadMessageCounts();const intervalId=setInterval(fetchUnreadMessageCounts,1000);return()=>clearInterval(intervalId);},[]);const fetchChannels=async()=>{try{const response=await fetch('http://127.0.0.1:5000/api/channels',{method:'GET',headers:{'Content-Type':'application/json'}});const data=await response.json();if(data.Success){setChannels(data.channels);}else{console.log('Display failed');}}catch(error){console.error('Error during display channels:',error);}};const fetchUnreadMessageCounts=async()=>{try{const response=await fetch(\"http://127.0.0.1:5000/api/users/\".concat(userid,\"/unread_message_counts\"),{method:'GET',headers:{'Content-Type':'application/json'}});const data=await response.json();if(data.Success){const counts=data.unread_message_counts.reduce((acc,curr)=>{acc[curr.channel_id]=curr.unread_message_count;return acc;},{});console.log(\"counts: \",counts);setUnreadMessageCounts(counts);}else{console.log('Failed to fetch unread message counts');}}catch(error){console.error('Error during fetching unread message counts:',error);}};const handleChannelClick=channelId=>{navigate(\"/channel/\".concat(channelId));setCurrentChannelId(channelId);};return/*#__PURE__*/_jsx(\"div\",{className:\"channel-list\",children:channels.map(channel=>/*#__PURE__*/_jsxs(\"div\",{// Apply 'current-channel' class if this is the current channel\nclassName:\"channel \".concat(currentChannelId===channel.id?'current-channel':''),onClick:()=>handleChannelClick(channel.id),children:[/*#__PURE__*/_jsx(\"span\",{className:\"channel-name\",children:channel.name}),unreadMessageCounts[channel.id]>0&&/*#__PURE__*/_jsxs(\"span\",{className:\"unread-messages\",children:[unreadMessageCounts[channel.id],\" unread\"]})]},channel.id))});}export default ChannelList;","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsx","_jsx","jsxs","_jsxs","ChannelList","channels","setChannels","currentChannelId","setCurrentChannelId","navigate","userid","sessionStorage","getItem","unreadMessageCounts","setUnreadMessageCounts","fetchChannels","fetchUnreadMessageCounts","intervalId","setInterval","clearInterval","response","fetch","method","headers","data","json","Success","console","log","error","concat","counts","unread_message_counts","reduce","acc","curr","channel_id","unread_message_count","handleChannelClick","channelId","className","children","map","channel","id","onClick","name"],"sources":["/Users/wangchenhui/Desktop/final_project_belay/react/src/components/ChannelList.jsx"],"sourcesContent":["// ChannelList.jsx\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport '../styles/channelList.css';\n\nfunction ChannelList() {\n  const [channels, setChannels] = useState([]);\n  const [currentChannelId, setCurrentChannelId] = useState(null);\n  let navigate = useNavigate();\n  const userid = sessionStorage.getItem(\"user_id\");\n  const [unreadMessageCounts, setUnreadMessageCounts] = useState({});\n\n  useEffect(() => {\n    fetchChannels();\n    fetchUnreadMessageCounts();\n\n    const intervalId = setInterval(fetchUnreadMessageCounts, 1000);\n    return () => clearInterval(intervalId);\n  }, []);\n\n  const fetchChannels = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:5000/api/channels', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      const data = await response.json();\n      if (data.Success) {\n        setChannels(data.channels);\n      } else {\n        console.log('Display failed');\n      }\n    } catch (error) {\n      console.error('Error during display channels:', error);\n    }\n  };\n\n  const fetchUnreadMessageCounts = async () => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/api/users/${userid}/unread_message_counts`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      const data = await response.json();\n      if (data.Success) {\n        const counts = data.unread_message_counts.reduce((acc, curr) => {\n          acc[curr.channel_id] = curr.unread_message_count;\n          return acc;\n        }, {});\n        console.log(\"counts: \", counts);\n        setUnreadMessageCounts(counts);\n      } else {\n        console.log('Failed to fetch unread message counts');\n      }\n    } catch (error) {\n      console.error('Error during fetching unread message counts:', error);\n    }\n  };\n\n  const handleChannelClick = (channelId) => {\n    navigate(`/channel/${channelId}`);\n    setCurrentChannelId(channelId);\n  };\n\n  return (\n    <div className=\"channel-list\">\n      {channels.map(channel => (\n        <div\n          key={channel.id}\n          // Apply 'current-channel' class if this is the current channel\n          className={`channel ${currentChannelId === channel.id ? 'current-channel' : ''}`} \n          onClick={() => handleChannelClick(channel.id)}\n        >\n          <span className=\"channel-name\">{channel.name}</span>\n          {/* <span className=\"unread-messages\">\n            {unreadMessageCounts[channel.id] ? ` ${unreadMessageCounts[channel.id]} unread` : ''}\n          </span> */}\n          {unreadMessageCounts[channel.id] > 0 && (\n            <span className=\"unread-messages\">\n              {unreadMessageCounts[channel.id]} unread\n            </span>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default ChannelList;\n"],"mappings":"AAAA;AACA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,OAASC,WAAW,KAAQ,kBAAkB,CAC9C,MAAO,2BAA2B,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAEnC,QAAS,CAAAC,WAAWA,CAAA,CAAG,CACrB,KAAM,CAACC,QAAQ,CAAEC,WAAW,CAAC,CAAGT,QAAQ,CAAC,EAAE,CAAC,CAC5C,KAAM,CAACU,gBAAgB,CAAEC,mBAAmB,CAAC,CAAGX,QAAQ,CAAC,IAAI,CAAC,CAC9D,GAAI,CAAAY,QAAQ,CAAGV,WAAW,CAAC,CAAC,CAC5B,KAAM,CAAAW,MAAM,CAAGC,cAAc,CAACC,OAAO,CAAC,SAAS,CAAC,CAChD,KAAM,CAACC,mBAAmB,CAAEC,sBAAsB,CAAC,CAAGjB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAElEC,SAAS,CAAC,IAAM,CACdiB,aAAa,CAAC,CAAC,CACfC,wBAAwB,CAAC,CAAC,CAE1B,KAAM,CAAAC,UAAU,CAAGC,WAAW,CAACF,wBAAwB,CAAE,IAAI,CAAC,CAC9D,MAAO,IAAMG,aAAa,CAACF,UAAU,CAAC,CACxC,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAF,aAAa,CAAG,KAAAA,CAAA,GAAY,CAChC,GAAI,CACF,KAAM,CAAAK,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,oCAAoC,CAAE,CACjEC,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CACF,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAJ,QAAQ,CAACK,IAAI,CAAC,CAAC,CAClC,GAAID,IAAI,CAACE,OAAO,CAAE,CAChBpB,WAAW,CAACkB,IAAI,CAACnB,QAAQ,CAAC,CAC5B,CAAC,IAAM,CACLsB,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC,CAC/B,CACF,CAAE,MAAOC,KAAK,CAAE,CACdF,OAAO,CAACE,KAAK,CAAC,gCAAgC,CAAEA,KAAK,CAAC,CACxD,CACF,CAAC,CAED,KAAM,CAAAb,wBAAwB,CAAG,KAAAA,CAAA,GAAY,CAC3C,GAAI,CACF,KAAM,CAAAI,QAAQ,CAAG,KAAM,CAAAC,KAAK,oCAAAS,MAAA,CAAoCpB,MAAM,2BAA0B,CAC9FY,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CACF,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAJ,QAAQ,CAACK,IAAI,CAAC,CAAC,CAClC,GAAID,IAAI,CAACE,OAAO,CAAE,CAChB,KAAM,CAAAK,MAAM,CAAGP,IAAI,CAACQ,qBAAqB,CAACC,MAAM,CAAC,CAACC,GAAG,CAAEC,IAAI,GAAK,CAC9DD,GAAG,CAACC,IAAI,CAACC,UAAU,CAAC,CAAGD,IAAI,CAACE,oBAAoB,CAChD,MAAO,CAAAH,GAAG,CACZ,CAAC,CAAE,CAAC,CAAC,CAAC,CACNP,OAAO,CAACC,GAAG,CAAC,UAAU,CAAEG,MAAM,CAAC,CAC/BjB,sBAAsB,CAACiB,MAAM,CAAC,CAChC,CAAC,IAAM,CACLJ,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC,CACtD,CACF,CAAE,MAAOC,KAAK,CAAE,CACdF,OAAO,CAACE,KAAK,CAAC,8CAA8C,CAAEA,KAAK,CAAC,CACtE,CACF,CAAC,CAED,KAAM,CAAAS,kBAAkB,CAAIC,SAAS,EAAK,CACxC9B,QAAQ,aAAAqB,MAAA,CAAaS,SAAS,CAAE,CAAC,CACjC/B,mBAAmB,CAAC+B,SAAS,CAAC,CAChC,CAAC,CAED,mBACEtC,IAAA,QAAKuC,SAAS,CAAC,cAAc,CAAAC,QAAA,CAC1BpC,QAAQ,CAACqC,GAAG,CAACC,OAAO,eACnBxC,KAAA,QAEE;AACAqC,SAAS,YAAAV,MAAA,CAAavB,gBAAgB,GAAKoC,OAAO,CAACC,EAAE,CAAG,iBAAiB,CAAG,EAAE,CAAG,CACjFC,OAAO,CAAEA,CAAA,GAAMP,kBAAkB,CAACK,OAAO,CAACC,EAAE,CAAE,CAAAH,QAAA,eAE9CxC,IAAA,SAAMuC,SAAS,CAAC,cAAc,CAAAC,QAAA,CAAEE,OAAO,CAACG,IAAI,CAAO,CAAC,CAInDjC,mBAAmB,CAAC8B,OAAO,CAACC,EAAE,CAAC,CAAG,CAAC,eAClCzC,KAAA,SAAMqC,SAAS,CAAC,iBAAiB,CAAAC,QAAA,EAC9B5B,mBAAmB,CAAC8B,OAAO,CAACC,EAAE,CAAC,CAAC,SACnC,EAAM,CACP,GAbID,OAAO,CAACC,EAcV,CACN,CAAC,CACC,CAAC,CAEV,CAEA,cAAe,CAAAxC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}