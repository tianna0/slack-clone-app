{"ast":null,"code":"var _jsxFileName = \"/Users/wangchenhui/Desktop/final_project_belay/react/src/components/Profile.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import NavBar from './NavBar';\n// // import '../styles/userHome.css'; \n\n// function Profile() {\n//     const username = sessionStorage.getItem(\"username\"); \n\n//     return (\n//         <div className=\"profile-container\">\n//           <NavBar username={username} /> \n//           <h1>This is the Profile</h1>\n//         </div>\n//       );\n// }\n\n// export default Profile;\n\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport NavBar from './NavBar';\n// import '../styles/userHome.css'; \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Profile() {\n  _s();\n  const [newName, setNewName] = useState('');\n  const [message, setMessage] = useState('');\n  const navigate = useNavigate();\n  const username = sessionStorage.getItem(\"username\");\n  const apiKey = sessionStorage.getItem(\"api_key\"); // Assuming the API key is stored in sessionStorage\n\n  const updateUsername = async e => {\n    e.preventDefault(); // Prevent the form from causing a page reload\n    if (!newName) {\n      setMessage(\"Please enter a new username.\");\n      return;\n    }\n    try {\n      const response = await fetch('/api/update_username', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          api_key: apiKey,\n          new_name: newName\n        })\n      });\n      const data = await response.json();\n      setMessage(data.message);\n      if (data.success) {\n        // Optionally, update the username in sessionStorage and navigate the user away\n        sessionStorage.setItem(\"username\", newName);\n        // navigate('/some-other-page'); // Redirect the user to another page if needed\n      }\n    } catch (error) {\n      console.error('Error updating username:', error);\n      setMessage(\"Failed to update username. Please try again.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"profile-container\",\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {\n      username: username\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"This is the Profile\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: updateUsername,\n      className: \"update-username-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"New Username:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newName,\n          onChange: e => setNewName(e.target.value),\n          placeholder: \"Enter new username\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Update Username\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n}\n_s(Profile, \"YGAVexc+F/GKJ1KG7DTKWwJ8QCg=\", false, function () {\n  return [useNavigate];\n});\n_c = Profile;\nexport default Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["React","useState","useNavigate","NavBar","jsxDEV","_jsxDEV","Profile","_s","newName","setNewName","message","setMessage","navigate","username","sessionStorage","getItem","apiKey","updateUsername","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","api_key","new_name","data","json","success","setItem","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","placeholder","_c","$RefreshReg$"],"sources":["/Users/wangchenhui/Desktop/final_project_belay/react/src/components/Profile.jsx"],"sourcesContent":["// import React, { useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import NavBar from './NavBar';\n// // import '../styles/userHome.css'; \n\n// function Profile() {\n//     const username = sessionStorage.getItem(\"username\"); \n\n//     return (\n//         <div className=\"profile-container\">\n//           <NavBar username={username} /> \n//           <h1>This is the Profile</h1>\n//         </div>\n//       );\n// }\n\n// export default Profile;\n\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport NavBar from './NavBar';\n// import '../styles/userHome.css'; \n\nfunction Profile() {\n    const [newName, setNewName] = useState('');\n    const [message, setMessage] = useState('');\n    const navigate = useNavigate();\n\n    const username = sessionStorage.getItem(\"username\");\n    const apiKey = sessionStorage.getItem(\"api_key\"); // Assuming the API key is stored in sessionStorage\n\n    const updateUsername = async (e) => {\n        e.preventDefault(); // Prevent the form from causing a page reload\n        if (!newName) {\n            setMessage(\"Please enter a new username.\");\n            return;\n        }\n        try {\n            const response = await fetch('/api/update_username', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    api_key: apiKey,\n                    new_name: newName,\n                }),\n            });\n\n            const data = await response.json();\n            setMessage(data.message);\n            if (data.success) {\n                // Optionally, update the username in sessionStorage and navigate the user away\n                sessionStorage.setItem(\"username\", newName);\n                // navigate('/some-other-page'); // Redirect the user to another page if needed\n            }\n        } catch (error) {\n            console.error('Error updating username:', error);\n            setMessage(\"Failed to update username. Please try again.\");\n        }\n    };\n\n    return (\n        <div className=\"profile-container\">\n            <NavBar username={username} />\n            <h1>This is the Profile</h1>\n            <form onSubmit={updateUsername} className=\"update-username-form\">\n                <label>\n                    New Username:\n                    <input\n                        type=\"text\"\n                        value={newName}\n                        onChange={(e) => setNewName(e.target.value)}\n                        placeholder=\"Enter new username\"\n                    />\n                </label>\n                <button type=\"submit\">Update Username</button>\n            </form>\n            {message && <p>{message}</p>}\n        </div>\n    );\n}\n\nexport default Profile;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}