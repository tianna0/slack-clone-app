{"ast":null,"code":"var _jsxFileName = \"/Users/wangchenhui/Desktop/final_project_belay/react/src/components/ReplyThread.jsx\",\n  _s = $RefreshSig$();\n// // ReplyThread.jsx\n// import React from 'react';\n\n// function ReplyThread() {\n//   return (\n//     <div className=\"message-thread\">\n//       <h3>Message Thread: Empty Reply</h3>\n//       {/* 这里可以添加逻辑来动态渲染消息 */}\n//     </div>\n//   );\n// }\n\n// export default ReplyThread;\n\n// // ReplyThread.jsx\n// import React, { useEffect, useState } from 'react';\n// import { useParams } from 'react-router-dom';\n// // import MessageThread from './MessageThread'; \n// import ReplyMessageThread from './ReplyMessageThread'; \n\n// function ReplyThread() {\n//   const [channelName, setChannelName] = useState('');\n//   const [message, setMessage] = useState('');\n\n//   return (\n//     <div className=\"reply-content\">\n//         <div className=\"reply-name\">\n//             <h2>Channel: {channelName}</h2>\n//         </div>\n//         <ReplyMessageThread />\n//         <div className=\"message-input-container\">\n//             <input\n//                 type=\"text\"\n//                 placeholder=\"Type a message...\"\n//                 className=\"message-input\"\n//                 value={message}\n//                 onChange={(e) => setMessage(e.target.value)}\n//             />\n//             <button className=\"post-message-button\" onClick={postMessage}>Send</button>\n//         </div>\n//     </div>\n//   );\n// }\n\n// export default ReplyThread;\n\n// ReplyThread.jsx\nimport React, { useEffect, useState } from 'react';\nimport '../styles/replyThread.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ReplyThread({\n  messageId\n}) {\n  _s();\n  const [messageDetails, setMessageDetails] = useState(null);\n  const [reply, setReply] = useState('');\n  useEffect(() => {\n    // 假设你有一个API从messageId获取消息的详细信息\n    const fetchMessageDetails = async () => {\n      try {\n        const response = await fetch(`http://127.0.0.1:5000/api/messages/${messageId}`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        const data = await response.json();\n        if (data.success) {\n          setMessageDetails(data.message);\n        } else {\n          console.log('Failed to fetch message details');\n        }\n      } catch (error) {\n        console.error('Error fetching message details:', error);\n      }\n    };\n    if (messageId) {\n      fetchMessageDetails();\n    }\n  }, [messageId]);\n  const handleSendReply = async () => {\n    // 发送回复的逻辑，可能需要调用API并传递reply内容\n    console.log(\"Sending reply:\", reply);\n    // 清空回复框\n    setReply('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"reply-thread\",\n    children: messageDetails && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-author\",\n          children: [messageDetails.author, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: messageDetails.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"replies-container\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reply-input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type your reply...\",\n          value: reply,\n          onChange: e => setReply(e.target.value),\n          className: \"reply-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendReply,\n          className: \"send-reply-button\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n_s(ReplyThread, \"0OTnJHskiWvOQf7vbkmbjk7YMf4=\");\n_c = ReplyThread;\nexport default ReplyThread;\nvar _c;\n$RefreshReg$(_c, \"ReplyThread\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","ReplyThread","messageId","_s","messageDetails","setMessageDetails","reply","setReply","fetchMessageDetails","response","fetch","method","headers","data","json","success","message","console","log","error","handleSendReply","className","children","author","fileName","_jsxFileName","lineNumber","columnNumber","content","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/wangchenhui/Desktop/final_project_belay/react/src/components/ReplyThread.jsx"],"sourcesContent":["// // ReplyThread.jsx\n// import React from 'react';\n\n// function ReplyThread() {\n//   return (\n//     <div className=\"message-thread\">\n//       <h3>Message Thread: Empty Reply</h3>\n//       {/* 这里可以添加逻辑来动态渲染消息 */}\n//     </div>\n//   );\n// }\n\n// export default ReplyThread;\n\n\n// // ReplyThread.jsx\n// import React, { useEffect, useState } from 'react';\n// import { useParams } from 'react-router-dom';\n// // import MessageThread from './MessageThread'; \n// import ReplyMessageThread from './ReplyMessageThread'; \n\n// function ReplyThread() {\n//   const [channelName, setChannelName] = useState('');\n//   const [message, setMessage] = useState('');\n  \n  \n//   return (\n//     <div className=\"reply-content\">\n//         <div className=\"reply-name\">\n//             <h2>Channel: {channelName}</h2>\n//         </div>\n//         <ReplyMessageThread />\n//         <div className=\"message-input-container\">\n//             <input\n//                 type=\"text\"\n//                 placeholder=\"Type a message...\"\n//                 className=\"message-input\"\n//                 value={message}\n//                 onChange={(e) => setMessage(e.target.value)}\n//             />\n//             <button className=\"post-message-button\" onClick={postMessage}>Send</button>\n//         </div>\n//     </div>\n//   );\n// }\n\n// export default ReplyThread;\n\n// ReplyThread.jsx\nimport React, { useEffect, useState } from 'react';\nimport '../styles/replyThread.css';\n\nfunction ReplyThread({ messageId }) {\n  const [messageDetails, setMessageDetails] = useState(null);\n  const [reply, setReply] = useState('');\n\n  useEffect(() => {\n    // 假设你有一个API从messageId获取消息的详细信息\n    const fetchMessageDetails = async () => {\n      try {\n        const response = await fetch(`http://127.0.0.1:5000/api/messages/${messageId}`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        });\n        const data = await response.json();\n        if (data.success) {\n          setMessageDetails(data.message);\n        } else {\n          console.log('Failed to fetch message details');\n        }\n      } catch (error) {\n        console.error('Error fetching message details:', error);\n      }\n    };\n\n    if (messageId) {\n      fetchMessageDetails();\n    }\n  }, [messageId]);\n\n  const handleSendReply = async () => {\n    // 发送回复的逻辑，可能需要调用API并传递reply内容\n    console.log(\"Sending reply:\", reply);\n    // 清空回复框\n    setReply('');\n  };\n\n  return (\n    <div className=\"reply-thread\">\n      {messageDetails && (\n        <>\n          <div className=\"message-details\">\n            <div className=\"message-author\">{messageDetails.author}:</div>\n            <div className=\"message-content\">{messageDetails.content}</div>\n          </div>\n          {/* 未来用于显示回复的组件或元素 */}\n          <div className=\"replies-container\">\n            {/* 回复将在这里显示 */}\n          </div>\n          <div className=\"reply-input-container\">\n            <input\n              type=\"text\"\n              placeholder=\"Type your reply...\"\n              value={reply}\n              onChange={(e) => setReply(e.target.value)}\n              className=\"reply-input\"\n            />\n            <button onClick={handleSendReply} className=\"send-reply-button\">Send</button>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default ReplyThread;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}