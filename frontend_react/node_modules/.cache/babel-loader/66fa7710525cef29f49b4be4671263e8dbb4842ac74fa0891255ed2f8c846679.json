{"ast":null,"code":"var _jsxFileName = \"/Users/wangchenhui/Desktop/final_project_belay/react/src/components/MessageThread.jsx\",\n  _s = $RefreshSig$();\n// MessageThread.jsx\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useParams } from 'react-router-dom';\nimport '../styles/messageThread.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MessageThread() {\n  _s();\n  const navigate = useNavigate();\n  const {\n    channelId\n  } = useParams(); // 从URL中获取channelId参数\n  const [messages, setMessages] = useState([]); // 用于存储消息列表的状态\n\n  useEffect(() => {\n    const fetchMessages = async () => {\n      try {\n        const response = await fetch(`http://127.0.0.1:5000/api/channels/${channelId}/messages`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        const data = await response.json();\n        if (data.Success) {\n          setMessages(data.message); // 存储消息到状态\n        } else {\n          console.log('Failed to fetch messages');\n        }\n      } catch (error) {\n        console.error('Error fetching messages:', error);\n      }\n    };\n    fetchMessages();\n  }, [channelId]); // 当channelId变化时重新获取消息\n\n  const handleMessageClick = message => {\n    // 在这里处理点击事件\n    console.log(\"Clicked message:\", message.content);\n    navigate(`/channel/${channelId}/message/${message.id}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"message-thread\",\n    children: messages.length > 0 ? messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message\",\n      onClick: () => handleMessageClick(message),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-author\",\n        children: [message.author, \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-content\",\n        children: message.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this)]\n    }, message.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"No messages in this thread\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(MessageThread, \"7j+v1gmngLMGmivbQixi2MWC+NU=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = MessageThread;\nexport default MessageThread;\nvar _c;\n$RefreshReg$(_c, \"MessageThread\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useParams","jsxDEV","_jsxDEV","MessageThread","_s","navigate","channelId","messages","setMessages","fetchMessages","response","fetch","method","headers","data","json","Success","message","console","log","error","handleMessageClick","content","id","className","children","length","map","onClick","author","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/wangchenhui/Desktop/final_project_belay/react/src/components/MessageThread.jsx"],"sourcesContent":["// MessageThread.jsx\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useParams } from 'react-router-dom';\nimport '../styles/messageThread.css';\n\nfunction MessageThread() {\n  const navigate = useNavigate();\n  const { channelId } = useParams(); // 从URL中获取channelId参数\n  const [messages, setMessages] = useState([]); // 用于存储消息列表的状态\n\n  useEffect(() => {\n    const fetchMessages = async () => {\n      try {\n        const response = await fetch(`http://127.0.0.1:5000/api/channels/${channelId}/messages`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        });\n        const data = await response.json();\n        if (data.Success) {\n          setMessages(data.message); // 存储消息到状态\n        } else {\n          console.log('Failed to fetch messages');\n        }\n      } catch (error) {\n        console.error('Error fetching messages:', error);\n      }\n    };\n\n    fetchMessages();\n  }, [channelId]); // 当channelId变化时重新获取消息\n\n\n  const handleMessageClick = (message) => {\n    // 在这里处理点击事件\n    console.log(\"Clicked message:\", message.content);\n    navigate(`/channel/${channelId}/message/${message.id}`);\n  };\n\n  return (\n    <div className=\"message-thread\">\n      {/* 动态渲染消息 */}\n      {messages.length > 0 ? (\n        messages.map((message) => (\n          <div key={message.id} className=\"message\" onClick={() => handleMessageClick(message)}>\n            <div className=\"message-author\">{message.author}:</div>\n            <div className=\"message-content\">{message.content}</div>\n          </div>\n        ))\n      ) : (\n        <h3>No messages in this thread</h3>\n      )}\n    </div>\n  );\n}\n\nexport default MessageThread;\n\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAO,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACvB,MAAMC,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEO;EAAU,CAAC,GAAGN,SAAS,CAAC,CAAC,CAAC,CAAC;EACnC,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE9CD,SAAS,CAAC,MAAM;IACd,MAAMY,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,sCAAqCL,SAAU,WAAU,EAAE;UACvFM,MAAM,EAAE,KAAK;UACbC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB;QACF,CAAC,CAAC;QACF,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClC,IAAID,IAAI,CAACE,OAAO,EAAE;UAChBR,WAAW,CAACM,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC;QAC7B,CAAC,MAAM;UACLC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;QACzC;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF,CAAC;IAEDX,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAACH,SAAS,CAAC,CAAC,CAAC,CAAC;;EAGjB,MAAMe,kBAAkB,GAAIJ,OAAO,IAAK;IACtC;IACAC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,OAAO,CAACK,OAAO,CAAC;IAChDjB,QAAQ,CAAE,YAAWC,SAAU,YAAWW,OAAO,CAACM,EAAG,EAAC,CAAC;EACzD,CAAC;EAED,oBACErB,OAAA;IAAKsB,SAAS,EAAC,gBAAgB;IAAAC,QAAA,EAE5BlB,QAAQ,CAACmB,MAAM,GAAG,CAAC,GAClBnB,QAAQ,CAACoB,GAAG,CAAEV,OAAO,iBACnBf,OAAA;MAAsBsB,SAAS,EAAC,SAAS;MAACI,OAAO,EAAEA,CAAA,KAAMP,kBAAkB,CAACJ,OAAO,CAAE;MAAAQ,QAAA,gBACnFvB,OAAA;QAAKsB,SAAS,EAAC,gBAAgB;QAAAC,QAAA,GAAER,OAAO,CAACY,MAAM,EAAC,GAAC;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACvD/B,OAAA;QAAKsB,SAAS,EAAC,iBAAiB;QAAAC,QAAA,EAAER,OAAO,CAACK;MAAO;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA,GAFhDhB,OAAO,CAACM,EAAE;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGf,CACN,CAAC,gBAEF/B,OAAA;MAAAuB,QAAA,EAAI;IAA0B;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EACnC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC7B,EAAA,CAlDQD,aAAa;EAAA,QACHJ,WAAW,EACNC,SAAS;AAAA;AAAAkC,EAAA,GAFxB/B,aAAa;AAoDtB,eAAeA,aAAa;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}