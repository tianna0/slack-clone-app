{"ast":null,"code":"var _jsxFileName = \"/Users/wangchenhui/Desktop/final_project_belay/react/src/components/LastReply.jsx\",\n  _s = $RefreshSig$();\n// // ReplyReply.jsx\n// import React from 'react';\n\n// function LastReply() {\n//   return (\n//     <div className=\"message-thread\">\n//       <h3>Message Thread: Empty Reply</h3>\n//     </div>\n//   );\n// }\n\n// export default LastReply;\n\n// MessageThread.jsx\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useParams } from 'react-router-dom';\n// import '../styles/messageThread.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LastReply() {\n  _s();\n  // const navigate = useNavigate();\n  const {\n    channelId,\n    messageId\n  } = useParams();\n  const [replies, setReplies] = useState([]);\n  useEffect(() => {\n    fetchReplies();\n\n    // Set up an interval to fetch messages every 500ms\n    const intervalId = setInterval(fetchReplies, 500);\n\n    // Cleanup function to clear the interval when the component unmounts\n    // or if the channelId changes\n    return () => clearInterval(intervalId);\n  }, [channelId]);\n  const fetchReplies = async () => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/api/channels/${channelId}/messages/${messageId}/get`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = await response.json();\n      if (data.Success) {\n        setReplies(data.replies);\n      } else {\n        console.log('Failed to fetch replies');\n      }\n    } catch (error) {\n      console.error('Error fetching replies:', error);\n    }\n  };\n\n  // const handleMessageClick = (reply) => {\n  //   console.log(\"Clicked message:\", message.content);\n  //   navigate(`/channel/${channelId}/message/${message.id}`);\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"reply-thread\",\n    children: replies.length > 0 ? replies.map(reply => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reply\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reply-author\",\n        children: [reply.author, \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reply-content\",\n        children: reply.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this)]\n    }, reply.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"No replies in this thread\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(LastReply, \"nRaPT3VK69yhRkypl+4ILrM1yz4=\", false, function () {\n  return [useParams];\n});\n_c = LastReply;\nexport default LastReply;\nvar _c;\n$RefreshReg$(_c, \"LastReply\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useParams","jsxDEV","_jsxDEV","LastReply","_s","channelId","messageId","replies","setReplies","fetchReplies","intervalId","setInterval","clearInterval","response","fetch","method","headers","data","json","Success","console","log","error","className","children","length","map","reply","author","fileName","_jsxFileName","lineNumber","columnNumber","content","id","_c","$RefreshReg$"],"sources":["/Users/wangchenhui/Desktop/final_project_belay/react/src/components/LastReply.jsx"],"sourcesContent":["// // ReplyReply.jsx\n// import React from 'react';\n\n// function LastReply() {\n//   return (\n//     <div className=\"message-thread\">\n//       <h3>Message Thread: Empty Reply</h3>\n//     </div>\n//   );\n// }\n\n// export default LastReply;\n\n\n// MessageThread.jsx\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useParams } from 'react-router-dom';\n// import '../styles/messageThread.css';\n\nfunction LastReply() {\n  // const navigate = useNavigate();\n  const { channelId, messageId } = useParams(); \n  const [replies, setReplies] = useState([]); \n\n  useEffect(() => {\n    fetchReplies();\n\n    // Set up an interval to fetch messages every 500ms\n    const intervalId = setInterval(fetchReplies, 500);\n\n    // Cleanup function to clear the interval when the component unmounts\n    // or if the channelId changes\n    return () => clearInterval(intervalId);\n  }, [channelId]); \n\n\n  const fetchReplies = async () => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/api/channels/${channelId}/messages/${messageId}/get`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      const data = await response.json();\n      if (data.Success) {\n        setReplies(data.replies); \n      } else {\n        console.log('Failed to fetch replies');\n      }\n    } catch (error) {\n      console.error('Error fetching replies:', error);\n    }\n  };\n\n  // const handleMessageClick = (reply) => {\n  //   console.log(\"Clicked message:\", message.content);\n  //   navigate(`/channel/${channelId}/message/${message.id}`);\n  // };\n\n  return (\n    <div className=\"reply-thread\">\n      {replies.length > 0 ? (\n        replies.map((reply) => (\n          <div key={reply.id} className=\"reply\">\n            <div className=\"reply-author\">{reply.author}:</div>\n            <div className=\"reply-content\">{reply.content}</div>\n          </div>\n        ))\n      ) : (\n        <h3>No replies in this thread</h3>\n      )}\n    </div>\n  );\n}\n\nexport default LastReply;"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,SAAS,QAAQ,kBAAkB;AAC5C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB;EACA,MAAM;IAAEC,SAAS;IAAEC;EAAU,CAAC,GAAGN,SAAS,CAAC,CAAC;EAC5C,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAE1CD,SAAS,CAAC,MAAM;IACdY,YAAY,CAAC,CAAC;;IAEd;IACA,MAAMC,UAAU,GAAGC,WAAW,CAACF,YAAY,EAAE,GAAG,CAAC;;IAEjD;IACA;IACA,OAAO,MAAMG,aAAa,CAACF,UAAU,CAAC;EACxC,CAAC,EAAE,CAACL,SAAS,CAAC,CAAC;EAGf,MAAMI,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAE,sCAAqCT,SAAU,aAAYC,SAAU,MAAK,EAAE;QACxGS,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACF,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClC,IAAID,IAAI,CAACE,OAAO,EAAE;QAChBX,UAAU,CAACS,IAAI,CAACV,OAAO,CAAC;MAC1B,CAAC,MAAM;QACLa,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;MACxC;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD;EACF,CAAC;;EAED;EACA;EACA;EACA;;EAEA,oBACEpB,OAAA;IAAKqB,SAAS,EAAC,cAAc;IAAAC,QAAA,EAC1BjB,OAAO,CAACkB,MAAM,GAAG,CAAC,GACjBlB,OAAO,CAACmB,GAAG,CAAEC,KAAK,iBAChBzB,OAAA;MAAoBqB,SAAS,EAAC,OAAO;MAAAC,QAAA,gBACnCtB,OAAA;QAAKqB,SAAS,EAAC,cAAc;QAAAC,QAAA,GAAEG,KAAK,CAACC,MAAM,EAAC,GAAC;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACnD9B,OAAA;QAAKqB,SAAS,EAAC,eAAe;QAAAC,QAAA,EAAEG,KAAK,CAACM;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA,GAF5CL,KAAK,CAACO,EAAE;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGb,CACN,CAAC,gBAEF9B,OAAA;MAAAsB,QAAA,EAAI;IAAyB;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAClC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC5B,EAAA,CAvDQD,SAAS;EAAA,QAEiBH,SAAS;AAAA;AAAAmC,EAAA,GAFnChC,SAAS;AAyDlB,eAAeA,SAAS;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}