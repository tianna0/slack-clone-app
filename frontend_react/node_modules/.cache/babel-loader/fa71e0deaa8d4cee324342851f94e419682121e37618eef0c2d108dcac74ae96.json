{"ast":null,"code":"var _jsxFileName = \"/Users/wangchenhui/Desktop/final_project_belay/react/src/components/ChannelList.jsx\",\n  _s = $RefreshSig$();\n// ChannelList.jsx\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport '../styles/channelList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChannelList() {\n  _s();\n  const [channels, setChannels] = useState([]);\n  const [currentChannelId, setCurrentChannelId] = useState(null);\n  let navigate = useNavigate();\n  const userid = sessionStorage.getItem(\"user_id\");\n  const [unreadMessageCounts, setUnreadMessageCounts] = useState({});\n  useEffect(() => {\n    fetchChannels();\n    fetchUnreadMessageCounts();\n  }, []);\n  const fetchChannels = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:5000/api/channels', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = await response.json();\n      if (data.Success) {\n        setChannels(data.channels);\n      } else {\n        console.log('Display failed');\n      }\n    } catch (error) {\n      console.error('Error during display channels:', error);\n    }\n  };\n  const fetchUnreadMessageCounts = async () => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/api/users/${userid}/unread_message_counts`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = await response.json();\n      if (data.Success) {\n        const counts = data.unread_message_counts.reduce((acc, curr) => {\n          acc[curr.channel_id] = curr.unread_message_count;\n          return acc;\n        }, {});\n        setUnreadMessageCounts(counts);\n      } else {\n        console.log('Failed to fetch unread message counts');\n      }\n    } catch (error) {\n      console.error('Error during fetching unread message counts:', error);\n    }\n  };\n  const handleChannelClick = channelId => {\n    navigate(`/channel/${channelId}`);\n    setCurrentChannelId(channelId);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"channel-list\",\n    children: channels.map(channel => /*#__PURE__*/_jsxDEV(\"div\", {\n      // Apply 'current-channel' class if this is the current channel\n      className: `channel ${currentChannelId === channel.id ? 'current-channel' : ''}`,\n      onClick: () => handleChannelClick(channel.id),\n      children: [channel.name, /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"unread-messages\",\n        children: unreadMessageCounts[channel.id] ? ` (${unreadMessageCounts[channel.id]} unread)` : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this)]\n    }, channel.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(ChannelList, \"NKWVPE24Xo0zY9Q0jUwlhWJbqpY=\", false, function () {\n  return [useNavigate];\n});\n_c = ChannelList;\nexport default ChannelList;\nvar _c;\n$RefreshReg$(_c, \"ChannelList\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","ChannelList","_s","channels","setChannels","currentChannelId","setCurrentChannelId","navigate","userid","sessionStorage","getItem","unreadMessageCounts","setUnreadMessageCounts","fetchChannels","fetchUnreadMessageCounts","response","fetch","method","headers","data","json","Success","console","log","error","counts","unread_message_counts","reduce","acc","curr","channel_id","unread_message_count","handleChannelClick","channelId","className","children","map","channel","id","onClick","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/wangchenhui/Desktop/final_project_belay/react/src/components/ChannelList.jsx"],"sourcesContent":["// ChannelList.jsx\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport '../styles/channelList.css';\n\nfunction ChannelList() {\n  const [channels, setChannels] = useState([]);\n  const [currentChannelId, setCurrentChannelId] = useState(null);\n  let navigate = useNavigate();\n  const userid = sessionStorage.getItem(\"user_id\");\n  const [unreadMessageCounts, setUnreadMessageCounts] = useState({});\n\n  useEffect(() => {\n    fetchChannels();\n    fetchUnreadMessageCounts();\n  }, []);\n\n  const fetchChannels = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:5000/api/channels', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      const data = await response.json();\n      if (data.Success) {\n        setChannels(data.channels);\n      } else {\n        console.log('Display failed');\n      }\n    } catch (error) {\n      console.error('Error during display channels:', error);\n    }\n  };\n\n  const fetchUnreadMessageCounts = async () => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/api/users/${userid}/unread_message_counts`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      const data = await response.json();\n      if (data.Success) {\n        const counts = data.unread_message_counts.reduce((acc, curr) => {\n          acc[curr.channel_id] = curr.unread_message_count;\n          return acc;\n        }, {});\n        setUnreadMessageCounts(counts);\n      } else {\n        console.log('Failed to fetch unread message counts');\n      }\n    } catch (error) {\n      console.error('Error during fetching unread message counts:', error);\n    }\n  };\n\n  const handleChannelClick = (channelId) => {\n    navigate(`/channel/${channelId}`);\n    setCurrentChannelId(channelId);\n  };\n\n  return (\n    <div className=\"channel-list\">\n      {channels.map(channel => (\n        <div\n          key={channel.id}\n          // Apply 'current-channel' class if this is the current channel\n          className={`channel ${currentChannelId === channel.id ? 'current-channel' : ''}`} \n          onClick={() => handleChannelClick(channel.id)}\n        >\n          {channel.name}\n          <span className=\"unread-messages\">\n            {unreadMessageCounts[channel.id] ? ` (${unreadMessageCounts[channel.id]} unread)` : ''}\n          </span>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default ChannelList;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAO,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC9D,IAAIW,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAC5B,MAAMU,MAAM,GAAGC,cAAc,CAACC,OAAO,CAAC,SAAS,CAAC;EAChD,MAAM,CAACC,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAElEC,SAAS,CAAC,MAAM;IACdgB,aAAa,CAAC,CAAC;IACfC,wBAAwB,CAAC,CAAC;EAC5B,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMD,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,EAAE;QACjEC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACF,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClC,IAAID,IAAI,CAACE,OAAO,EAAE;QAChBjB,WAAW,CAACe,IAAI,CAAChB,QAAQ,CAAC;MAC5B,CAAC,MAAM;QACLmB,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;MAC/B;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACxD;EACF,CAAC;EAED,MAAMV,wBAAwB,GAAG,MAAAA,CAAA,KAAY;IAC3C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,mCAAkCR,MAAO,wBAAuB,EAAE;QAC9FS,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACF,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClC,IAAID,IAAI,CAACE,OAAO,EAAE;QAChB,MAAMI,MAAM,GAAGN,IAAI,CAACO,qBAAqB,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAK;UAC9DD,GAAG,CAACC,IAAI,CAACC,UAAU,CAAC,GAAGD,IAAI,CAACE,oBAAoB;UAChD,OAAOH,GAAG;QACZ,CAAC,EAAE,CAAC,CAAC,CAAC;QACNhB,sBAAsB,CAACa,MAAM,CAAC;MAChC,CAAC,MAAM;QACLH,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;MACtD;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,8CAA8C,EAAEA,KAAK,CAAC;IACtE;EACF,CAAC;EAED,MAAMQ,kBAAkB,GAAIC,SAAS,IAAK;IACxC1B,QAAQ,CAAE,YAAW0B,SAAU,EAAC,CAAC;IACjC3B,mBAAmB,CAAC2B,SAAS,CAAC;EAChC,CAAC;EAED,oBACEjC,OAAA;IAAKkC,SAAS,EAAC,cAAc;IAAAC,QAAA,EAC1BhC,QAAQ,CAACiC,GAAG,CAACC,OAAO,iBACnBrC,OAAA;MAEE;MACAkC,SAAS,EAAG,WAAU7B,gBAAgB,KAAKgC,OAAO,CAACC,EAAE,GAAG,iBAAiB,GAAG,EAAG,EAAE;MACjFC,OAAO,EAAEA,CAAA,KAAMP,kBAAkB,CAACK,OAAO,CAACC,EAAE,CAAE;MAAAH,QAAA,GAE7CE,OAAO,CAACG,IAAI,eACbxC,OAAA;QAAMkC,SAAS,EAAC,iBAAiB;QAAAC,QAAA,EAC9BxB,mBAAmB,CAAC0B,OAAO,CAACC,EAAE,CAAC,GAAI,KAAI3B,mBAAmB,CAAC0B,OAAO,CAACC,EAAE,CAAE,UAAS,GAAG;MAAE;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClF,CAAC;IAAA,GARFP,OAAO,CAACC,EAAE;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OASZ,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAAC1C,EAAA,CA5EQD,WAAW;EAAA,QAGHH,WAAW;AAAA;AAAA+C,EAAA,GAHnB5C,WAAW;AA8EpB,eAAeA,WAAW;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}