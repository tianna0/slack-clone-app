{"ast":null,"code":"var _jsxFileName = \"/Users/wangchenhui/Desktop/final_project_belay/react/src/components/ChannelContent.jsx\",\n  _s = $RefreshSig$();\n// ChannelContent.jsx\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport NavBar from './NavBar';\nimport ChannelList from './ChannelList';\nimport MessageThread from './MessageThread';\nimport ReplyThread from './ReplyThread';\nimport '../styles/channelContent.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChannelContent() {\n  _s();\n  const username = sessionStorage.getItem(\"username\");\n  const userid = sessionStorage.getItem(\"user_id\");\n  const {\n    channelId,\n    messageId\n  } = useParams();\n  const [channelName, setChannelName] = useState('');\n  const [message, setMessage] = useState('');\n  const [showReplyThread, setShowReplyThread] = useState(true);\n  useEffect(() => {\n    fetchChannelDetails();\n    setShowReplyThread(false);\n  }, [channelId]);\n  const toggleReplyThreadVisibility = () => {\n    setShowReplyThread(!showReplyThread);\n  };\n  const fetchChannelDetails = async () => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/api/channel/${channelId}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = await response.json();\n      if (data.Success) {\n        setChannelName(data.message.name);\n      } else {\n        console.log('Channel not found');\n      }\n    } catch (error) {\n      console.error('Error fetching channel details:', error);\n    }\n  };\n  const postMessage = async () => {\n    if (!message.trim()) {\n      alert(\"Please enter a message.\");\n      return;\n    }\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/api/channels/${channelId}/messages/post`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userid: userid,\n          content: message\n        })\n      });\n      const data = await response.json();\n      if (data.Success) {\n        console.log('Message posted successfully');\n        setMessage('');\n      } else {\n        console.log('Failed to post message:', data.error);\n      }\n    } catch (error) {\n      console.error('Error posting message:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home-container\",\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {\n      username: username\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(ChannelList, {\n        className: \"channel-list\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"channel-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"channel-name\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"Channel: \", channelName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: toggleReplyThreadVisibility,\n            className: \"toggle-reply-thread\",\n            children: showReplyThread ? 'Hide Replies' : 'Show Replies'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(MessageThread, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-input-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Type a message...\",\n            className: \"message-input\",\n            value: message,\n            onChange: e => setMessage(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"post-message-button\",\n            onClick: postMessage,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), showReplyThread && /*#__PURE__*/_jsxDEV(ReplyThread, {\n        className: \"reply-thread\",\n        messageId: messageId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 37\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n}\n_s(ChannelContent, \"a8srCAFnmr3ScepMPpqKd/037K4=\", false, function () {\n  return [useParams];\n});\n_c = ChannelContent;\nexport default ChannelContent;\nvar _c;\n$RefreshReg$(_c, \"ChannelContent\");","map":{"version":3,"names":["React","useEffect","useState","useParams","NavBar","ChannelList","MessageThread","ReplyThread","jsxDEV","_jsxDEV","ChannelContent","_s","username","sessionStorage","getItem","userid","channelId","messageId","channelName","setChannelName","message","setMessage","showReplyThread","setShowReplyThread","fetchChannelDetails","toggleReplyThreadVisibility","response","fetch","method","headers","data","json","Success","name","console","log","error","postMessage","trim","alert","body","JSON","stringify","content","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/wangchenhui/Desktop/final_project_belay/react/src/components/ChannelContent.jsx"],"sourcesContent":["// ChannelContent.jsx\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport NavBar from './NavBar';\nimport ChannelList from './ChannelList';\nimport MessageThread from './MessageThread'; \nimport ReplyThread from './ReplyThread'; \nimport '../styles/channelContent.css';\n\nfunction ChannelContent() {\n    const username = sessionStorage.getItem(\"username\");\n    const userid = sessionStorage.getItem(\"user_id\");\n    const { channelId, messageId } = useParams();\n    const [channelName, setChannelName] = useState('');\n    const [message, setMessage] = useState('');\n\n    const [showReplyThread, setShowReplyThread] = useState(true);\n\n    useEffect(() => {\n        fetchChannelDetails();\n        setShowReplyThread(false);\n    }, [channelId]); \n\n    const toggleReplyThreadVisibility = () => {\n        setShowReplyThread(!showReplyThread);\n    };\n\n    const fetchChannelDetails = async () => {\n        try {\n            const response = await fetch(`http://127.0.0.1:5000/api/channel/${channelId}`, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            });\n            const data = await response.json();\n            if (data.Success) {\n                setChannelName(data.message.name); \n            } else {\n                console.log('Channel not found');\n            }\n        } catch (error) {\n            console.error('Error fetching channel details:', error);\n        }\n    };\n\n\n    const postMessage = async () => {\n        if (!message.trim()) {\n            alert(\"Please enter a message.\");\n            return;\n        }\n        try {\n            const response = await fetch(`http://127.0.0.1:5000/api/channels/${channelId}/messages/post`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    userid: userid, \n                    content: message,\n                }),\n            });\n            const data = await response.json();\n            if (data.Success) {\n                console.log('Message posted successfully');\n                setMessage(''); \n            } else {\n                console.log('Failed to post message:', data.error);\n            }\n        } catch (error) {\n            console.error('Error posting message:', error);\n        }\n    };\n\n\n\n    return (\n        <div className=\"home-container\">\n            <NavBar username={username} />\n            <div className=\"main-content\">\n                <ChannelList className=\"channel-list\"/>\n                <div className=\"channel-content\">\n                    <div className=\"channel-name\">\n                        <h2>Channel: {channelName}</h2>\n                        <button onClick={toggleReplyThreadVisibility} className=\"toggle-reply-thread\">\n                            {showReplyThread ? 'Hide Replies' : 'Show Replies'}\n                        </button>\n                    </div>\n                    <MessageThread />\n                    <div className=\"message-input-container\">\n                        <input\n                            type=\"text\"\n                            placeholder=\"Type a message...\"\n                            className=\"message-input\"\n                            value={message}\n                            onChange={(e) => setMessage(e.target.value)}\n                        />\n                        <button className=\"post-message-button\" onClick={postMessage}>Send</button>\n                    </div>\n                </div>\n                {showReplyThread && <ReplyThread className=\"reply-thread\" messageId={messageId}/>} \n            </div>\n        </div>\n    );\n}\n\nexport default ChannelContent;\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}