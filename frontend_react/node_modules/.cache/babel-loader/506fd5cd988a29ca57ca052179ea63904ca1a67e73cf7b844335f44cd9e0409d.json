{"ast":null,"code":"var _jsxFileName = \"/Users/wangchenhui/Desktop/final_project_belay/react/src/components/MessageThread.jsx\",\n  _s = $RefreshSig$();\n// MessageThread.jsx\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useParams } from 'react-router-dom';\nimport '../styles/messageThread.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MessageThread() {\n  _s();\n  const navigate = useNavigate();\n  const {\n    channelId\n  } = useParams();\n  const [messages, setMessages] = useState([]);\n  const userid = sessionStorage.getItem(\"user_id\");\n  useEffect(() => {\n    fetchMessages();\n    const intervalId = setInterval(fetchMessages, 5000);\n    return () => clearInterval(intervalId);\n  }, [channelId]);\n  const fetchMessages = async () => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/api/channels/${channelId}/messages`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = await response.json();\n      // console.log(\"data: \", data);\n      if (data.Success) {\n        setMessages(data.message);\n      } else {\n        console.log('Failed to fetch messages');\n      }\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n  const handleMessageClick = message => {\n    console.log(\"Clicked message:\", message.content);\n    navigate(`/channel/${channelId}/message/${message.id}`);\n  };\n  const reactionTrack = async (emoji, replyMessageId) => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/api/reactions/post`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user_id: userid,\n          message_id: replyMessageId,\n          emoji: emoji\n        })\n      });\n      const data = await response.json();\n      if (data.Success) {\n        console.log(\"Reactions stored successfully: \", data.error);\n      } else {\n        console.log(\"Failed to save reactions\");\n      }\n    } catch (error) {\n      console.error('Error saving reactions: ', error);\n    }\n  };\n\n  // for hovering emojis display user names\n  const [tooltip, setTooltip] = useState({\n    visible: false,\n    users: [],\n    position: {\n      x: 0,\n      y: 0\n    }\n  });\n  const fetchReactionUsers = async (emoji, messageId, event) => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/api/reactions/${messageId}/${encodeURIComponent(emoji)}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = await response.json();\n      if (data.Success) {\n        setTooltip({\n          visible: true,\n          users: data.users,\n          position: {\n            x: event.clientX,\n            y: event.clientY\n          }\n        });\n      } else {\n        console.log(\"Failed to fetch users for reaction\");\n      }\n    } catch (error) {\n      console.error('Error fetching users for reaction: ', error);\n    }\n  };\n  const Tooltip = ({\n    users,\n    position\n  }) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: position.y,\n        left: position.x,\n        backgroundColor: 'white',\n        border: '1px solid black',\n        padding: '10px',\n        borderRadius: '5px',\n        display: 'flex',\n        flexDirection: 'column',\n        zIndex: 100\n      },\n      children: users.map((user, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n        children: user\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Find image URLs in a message and return an array of image URLs\n  const extractImageUrls = text => {\n    const urlRegex = /(\\bhttps?:\\/\\/\\S+\\.(?:png|jpg|jpeg|gif)\\b)/g;\n    let urls = [];\n    let match;\n    while ((match = urlRegex.exec(text)) !== null) {\n      urls.push(match[0]);\n    }\n    return urls;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"message-thread\",\n    children: [tooltip.visible && /*#__PURE__*/_jsxDEV(Tooltip, {\n      users: tooltip.users,\n      position: tooltip.position\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 27\n    }, this), messages.length > 0 ? messages.map(message => {\n      // Extract image URLs from the message content\n      const imageUrls = extractImageUrls(message.content);\n\n      // Remove the image URLs from the message content\n      let messageText = message.content;\n      imageUrls.forEach(url => {\n        messageText = messageText.replace(url, '');\n      });\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        onClick: () => handleMessageClick(message),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-details\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-author\",\n            children: [message.author, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content\",\n            children: message.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"replies-emojis-container\",\n            children: [message.replies_count !== 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-replies_count\",\n              children: [message.replies_count, \" Replies\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-emojis-left\",\n              children: [...new Set(message.emojis)].map((emoji, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"emoji\",\n                onMouseEnter: e => fetchReactionUsers(emoji, message.id, e),\n                onMouseLeave: () => setTooltip({\n                  ...tooltip,\n                  visible: false\n                }),\n                children: emoji\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-emojis\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"emoji\",\n            onClick: () => reactionTrack(\"ðŸ¤¯\", message.id),\n            children: \"\\uD83E\\uDD2F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"emoji\",\n            onClick: () => reactionTrack(\"ðŸ‘¿\", message.id),\n            children: \"\\uD83D\\uDC7F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 15\n        }, this)]\n      }, message.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }, this);\n    }) : /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"No messages in this thread\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n}\n_s(MessageThread, \"zElTwgtok5LgsFP0GWyW/fvCRno=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = MessageThread;\nexport default MessageThread;\n\n// return (\n//   <div className=\"message-thread\">\n//     {/* Messages */}\n//     {tooltip.visible && <Tooltip users={tooltip.users} position={tooltip.position} />}\n\n//     {messages.length > 0 ? (\n//       messages.map((message) => (\n\n//         <div key={message.id} className=\"message\" onClick={() => handleMessageClick(message)}>\n//           <div className=\"message-details\">\n//             <div className=\"message-author\">{message.author}:</div>\n//             <div className=\"message-content\">{message.content}</div>\n//             <div className=\"replies-emojis-container\">\n//               {message.replies_count !== 0 && (\n//                 <div className=\"message-replies_count\">{message.replies_count} Replies</div>\n//               )}\n//               <div className=\"message-emojis-left\">\n//                 {/* {message.emojis.map((emoji, index) => (\n//                   <span key={index} className=\"emoji\">{emoji}</span>\n//                 ))} */}\n//                 {[...new Set(message.emojis)].map((emoji, index) => (\n//                   <span key={index} className=\"emoji\" onMouseEnter={(e) => fetchReactionUsers(emoji, message.id, e)} onMouseLeave={() => setTooltip({ ...tooltip, visible: false })}>\n//                     {emoji}\n//                   </span>\n//                 ))}\n//               </div>\n//             </div>\n//           </div>\n//           <div className=\"message-emojis\">\n//             <button className='emoji' onClick={() => reactionTrack(\"ðŸ¤¯\", message.id)}>ðŸ¤¯</button>\n//             <button className='emoji' onClick={() => reactionTrack(\"ðŸ‘¿\", message.id)}>ðŸ‘¿</button>\n//           </div>\n//         </div>\n//       ))\n//     ) : (\n//       <h3>No messages in this thread</h3>\n//     )}\n//   </div>\n// );\nvar _c;\n$RefreshReg$(_c, \"MessageThread\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useParams","jsxDEV","_jsxDEV","MessageThread","_s","navigate","channelId","messages","setMessages","userid","sessionStorage","getItem","fetchMessages","intervalId","setInterval","clearInterval","response","fetch","method","headers","data","json","Success","message","console","log","error","handleMessageClick","content","id","reactionTrack","emoji","replyMessageId","body","JSON","stringify","user_id","message_id","tooltip","setTooltip","visible","users","position","x","y","fetchReactionUsers","messageId","event","encodeURIComponent","clientX","clientY","Tooltip","style","top","left","backgroundColor","border","padding","borderRadius","display","flexDirection","zIndex","children","map","user","index","fileName","_jsxFileName","lineNumber","columnNumber","extractImageUrls","text","urlRegex","urls","match","exec","push","className","length","imageUrls","messageText","forEach","url","replace","onClick","author","replies_count","Set","emojis","onMouseEnter","e","onMouseLeave","_c","$RefreshReg$"],"sources":["/Users/wangchenhui/Desktop/final_project_belay/react/src/components/MessageThread.jsx"],"sourcesContent":["// MessageThread.jsx\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useParams } from 'react-router-dom';\nimport '../styles/messageThread.css';\n\nfunction MessageThread() {\n  const navigate = useNavigate();\n  const { channelId } = useParams(); \n  const [messages, setMessages] = useState([]); \n  const userid = sessionStorage.getItem(\"user_id\");\n\n  useEffect(() => {\n    fetchMessages();\n\n    const intervalId = setInterval(fetchMessages, 5000);\n    return () => clearInterval(intervalId);\n  }, [channelId]); \n\n\n  const fetchMessages = async () => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/api/channels/${channelId}/messages`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      const data = await response.json();\n      // console.log(\"data: \", data);\n      if (data.Success) {\n        setMessages(data.message); \n      } else {\n        console.log('Failed to fetch messages');\n      }\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n\n  const handleMessageClick = (message) => {\n    console.log(\"Clicked message:\", message.content);\n    navigate(`/channel/${channelId}/message/${message.id}`);\n  };\n\n\n  const reactionTrack = async (emoji, replyMessageId) => {\n    \n    try {\n      const response = await fetch(`http://127.0.0.1:5000/api/reactions/post`,{\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          user_id: userid,\n          message_id: replyMessageId,\n          emoji: emoji\n        }),\n      });\n      const data = await response.json();\n      if (data.Success) {\n        console.log(\"Reactions stored successfully: \", data.error);\n      } else {\n        console.log(\"Failed to save reactions\")\n      }\n    } catch (error) {\n      console.error('Error saving reactions: ', error);\n    }\n  };\n\n\n  // for hovering emojis display user names\n  const [tooltip, setTooltip] = useState({ visible: false, users: [], position: { x: 0, y: 0 } });\n\n  const fetchReactionUsers = async (emoji, messageId, event) => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/api/reactions/${messageId}/${encodeURIComponent(emoji)}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      const data = await response.json();\n      if (data.Success) {\n        setTooltip({\n          visible: true,\n          users: data.users,\n          position: { x: event.clientX, y: event.clientY }\n        });\n      } else {\n        console.log(\"Failed to fetch users for reaction\");\n      }\n    } catch (error) {\n      console.error('Error fetching users for reaction: ', error);\n    }\n  };\n  \n  const Tooltip = ({ users, position }) => {\n    return (\n      <div style={{ position: 'absolute', top: position.y, left: position.x, backgroundColor: 'white', border: '1px solid black', padding: '10px', borderRadius: '5px', display: 'flex', flexDirection: 'column', zIndex: 100 }}>\n        {users.map((user, index) => (\n          <span key={index}>{user}</span>\n        ))}\n      </div>\n    );\n  };\n  \n  // Find image URLs in a message and return an array of image URLs\n  const extractImageUrls = (text) => {\n    const urlRegex = /(\\bhttps?:\\/\\/\\S+\\.(?:png|jpg|jpeg|gif)\\b)/g;\n    let urls = [];\n    let match;\n\n    while ((match = urlRegex.exec(text)) !== null) {\n      urls.push(match[0]);\n    }\n\n    return urls;\n  };\n\n\n  return (\n    <div className=\"message-thread\">\n      {/* Messages */}\n      {tooltip.visible && <Tooltip users={tooltip.users} position={tooltip.position} />}\n      \n      {messages.length > 0 ? (\n        messages.map((message) => {\n          \n          // Extract image URLs from the message content\n          const imageUrls = extractImageUrls(message.content);\n\n          // Remove the image URLs from the message content\n          let messageText = message.content;\n          imageUrls.forEach(url => {\n            messageText = messageText.replace(url, '');\n          });\n          return (\n          \n            <div key={message.id} className=\"message\" onClick={() => handleMessageClick(message)}>\n              <div className=\"message-details\">\n                <div className=\"message-author\">{message.author}:</div>\n                <div className=\"message-content\">{message.content}</div>\n                <div className=\"replies-emojis-container\">\n                  {message.replies_count !== 0 && (\n                    <div className=\"message-replies_count\">{message.replies_count} Replies</div>\n                  )}\n                  <div className=\"message-emojis-left\">\n                    {/* {message.emojis.map((emoji, index) => (\n                      <span key={index} className=\"emoji\">{emoji}</span>\n                    ))} */}\n                    {[...new Set(message.emojis)].map((emoji, index) => (\n                      <span key={index} className=\"emoji\" onMouseEnter={(e) => fetchReactionUsers(emoji, message.id, e)} onMouseLeave={() => setTooltip({ ...tooltip, visible: false })}>\n                        {emoji}\n                      </span>\n                    ))}\n                  </div>\n                </div>\n              </div>\n              <div className=\"message-emojis\">\n                <button className='emoji' onClick={() => reactionTrack(\"ðŸ¤¯\", message.id)}>ðŸ¤¯</button>\n                <button className='emoji' onClick={() => reactionTrack(\"ðŸ‘¿\", message.id)}>ðŸ‘¿</button>\n              </div>\n            </div>\n          );\n        })\n      ) : (\n        <h3>No messages in this thread</h3>\n      )}\n    </div>\n  );\n}\n\nexport default MessageThread;\n\n\n// return (\n//   <div className=\"message-thread\">\n//     {/* Messages */}\n//     {tooltip.visible && <Tooltip users={tooltip.users} position={tooltip.position} />}\n    \n//     {messages.length > 0 ? (\n//       messages.map((message) => (\n        \n        \n//         <div key={message.id} className=\"message\" onClick={() => handleMessageClick(message)}>\n//           <div className=\"message-details\">\n//             <div className=\"message-author\">{message.author}:</div>\n//             <div className=\"message-content\">{message.content}</div>\n//             <div className=\"replies-emojis-container\">\n//               {message.replies_count !== 0 && (\n//                 <div className=\"message-replies_count\">{message.replies_count} Replies</div>\n//               )}\n//               <div className=\"message-emojis-left\">\n//                 {/* {message.emojis.map((emoji, index) => (\n//                   <span key={index} className=\"emoji\">{emoji}</span>\n//                 ))} */}\n//                 {[...new Set(message.emojis)].map((emoji, index) => (\n//                   <span key={index} className=\"emoji\" onMouseEnter={(e) => fetchReactionUsers(emoji, message.id, e)} onMouseLeave={() => setTooltip({ ...tooltip, visible: false })}>\n//                     {emoji}\n//                   </span>\n//                 ))}\n//               </div>\n//             </div>\n//           </div>\n//           <div className=\"message-emojis\">\n//             <button className='emoji' onClick={() => reactionTrack(\"ðŸ¤¯\", message.id)}>ðŸ¤¯</button>\n//             <button className='emoji' onClick={() => reactionTrack(\"ðŸ‘¿\", message.id)}>ðŸ‘¿</button>\n//           </div>\n//         </div>\n//       ))\n//     ) : (\n//       <h3>No messages in this thread</h3>\n//     )}\n//   </div>\n// );"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}