{"ast":null,"code":"import React,{useState}from'react';import{useNavigate}from'react-router-dom';import NavBar from'./NavBar';import'../styles/profile.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";function Profile(){const[newName,setNewName]=useState('');const[newPassword,setNewPassword]=useState('');const[confirmPassword,setConfirmPassword]=useState('');const[message,setMessage]=useState('');const username=sessionStorage.getItem(\"username\");const apiKey=sessionStorage.getItem(\"\".concat(username,\"_api_key\"));// Assuming the API key is stored in sessionStorage\nconst updateUsername=async e=>{e.preventDefault();// Prevent the form from causing a page reload\nif(!newName){setMessage(\"Please enter a new username.\");return;}try{const response=await fetch('http://127.0.0.1:5000/api/update_username',{method:'POST',headers:{'Content-Type':'application/json','X-API-Key':apiKey},body:JSON.stringify({api_key:apiKey,new_name:newName})});const data=await response.json();setMessage(data.message);if(data.success){// Before updating sessionStorage, remove the old username's API key\nconst oldApiKeyKeyName=\"\".concat(username,\"_api_key\");sessionStorage.removeItem(oldApiKeyKeyName);// Remove the old API key\n// Now update the sessionStorage with the new username and API key\nsessionStorage.setItem('username',newName);sessionStorage.setItem(\"\".concat(newName,\"_api_key\"),apiKey);console.log(\"Session updated: \",sessionStorage);// navigate('/some-other-page'); // Redirect the user to another page if needed\n}}catch(error){console.error('Error updating username:',error);setMessage(\"Failed to update username. Please try again.\");}};const updatePassword=async e=>{e.preventDefault();if(!newPassword||!confirmPassword||newPassword!==confirmPassword){setMessage(\"Passwords do not match or are missing.\");return;}try{const response=await fetch('http://127.0.0.1:5000/api/update_password',{method:'POST',headers:{'Content-Type':'application/json','X-API-Key':apiKey},body:JSON.stringify({api_key:apiKey,new_password:newPassword,confirm_password:confirmPassword})});const data=await response.json();console.log(\"session: \",sessionStorage);setMessage(data.message);if(data.success){console.log(\"success updated password\");// Handle successful password update, e.g., clear form, redirect, etc.\n}}catch(error){console.error('Error updating password:',error);setMessage(\"Failed to update password. Please try again.\");}};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(NavBar,{username:username}),/*#__PURE__*/_jsxs(\"div\",{className:\"profile-container\",children:[/*#__PURE__*/_jsxs(\"form\",{onSubmit:updateUsername,className:\"update-username-form\",children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"New Username:\",/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:newName,onChange:e=>setNewName(e.target.value),placeholder:\"Enter new username\"})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Update Username\"})]}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:updatePassword,className:\"update-password-form\",children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"New Password:\",/*#__PURE__*/_jsx(\"input\",{type:\"password\",value:newPassword,onChange:e=>setNewPassword(e.target.value),placeholder:\"New password\"})]}),/*#__PURE__*/_jsxs(\"label\",{children:[\"Confirm Password:\",/*#__PURE__*/_jsx(\"input\",{type:\"password\",value:confirmPassword,onChange:e=>setConfirmPassword(e.target.value),placeholder:\"Confirm new password\"})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Update Password\"})]}),message&&/*#__PURE__*/_jsx(\"p\",{children:message})]})]});}export default Profile;","map":{"version":3,"names":["React","useState","useNavigate","NavBar","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Profile","newName","setNewName","newPassword","setNewPassword","confirmPassword","setConfirmPassword","message","setMessage","username","sessionStorage","getItem","apiKey","concat","updateUsername","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","api_key","new_name","data","json","success","oldApiKeyKeyName","removeItem","setItem","console","log","error","updatePassword","new_password","confirm_password","children","className","onSubmit","type","value","onChange","target","placeholder"],"sources":["/Users/wangchenhui/Desktop/final_project_belay/react/src/components/Profile.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport NavBar from './NavBar';\nimport '../styles/profile.css'; \n\nfunction Profile() {\n    const [newName, setNewName] = useState('');\n    const [newPassword, setNewPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n    const [message, setMessage] = useState('');\n\n    const username = sessionStorage.getItem(\"username\");\n    const apiKey = sessionStorage.getItem(`${username}_api_key`); // Assuming the API key is stored in sessionStorage\n\n\n    const updateUsername = async (e) => {\n      e.preventDefault(); // Prevent the form from causing a page reload\n      if (!newName) {\n          setMessage(\"Please enter a new username.\");\n          return;\n      }\n      try {\n          const response = await fetch('http://127.0.0.1:5000/api/update_username', {\n              method: 'POST',\n              headers: {\n                  'Content-Type': 'application/json',\n                  'X-API-Key': apiKey\n              },\n              body: JSON.stringify({\n                  api_key: apiKey,\n                  new_name: newName,\n              }),\n          });\n  \n          const data = await response.json();\n          setMessage(data.message);\n          if (data.success) {\n              // Before updating sessionStorage, remove the old username's API key\n              const oldApiKeyKeyName = `${username}_api_key`;\n              sessionStorage.removeItem(oldApiKeyKeyName); // Remove the old API key\n              \n              // Now update the sessionStorage with the new username and API key\n              sessionStorage.setItem('username', newName);\n              sessionStorage.setItem(`${newName}_api_key`, apiKey);\n              \n              console.log(\"Session updated: \", sessionStorage);\n              // navigate('/some-other-page'); // Redirect the user to another page if needed\n          }\n      } catch (error) {\n          console.error('Error updating username:', error);\n          setMessage(\"Failed to update username. Please try again.\");\n      }\n  };\n  \n\n\n    const updatePassword = async (e) => {\n      e.preventDefault();\n      if (!newPassword || !confirmPassword || newPassword !== confirmPassword) {\n          setMessage(\"Passwords do not match or are missing.\");\n          return;\n      }\n      try {\n          const response = await fetch('http://127.0.0.1:5000/api/update_password', {\n              method: 'POST',\n              headers: {\n                  'Content-Type': 'application/json',\n                  'X-API-Key': apiKey\n              },\n              body: JSON.stringify({\n                  api_key: apiKey,\n                  new_password: newPassword,\n                  confirm_password: confirmPassword,\n              }),\n          });\n          \n          const data = await response.json();\n          console.log(\"session: \", sessionStorage)\n          setMessage(data.message);\n          if (data.success) {\n              console.log(\"success updated password\")\n              // Handle successful password update, e.g., clear form, redirect, etc.\n          }\n      } catch (error) {\n          console.error('Error updating password:', error);\n          setMessage(\"Failed to update password. Please try again.\");\n      }\n  };\n\n\n    return (\n      <>\n        <NavBar username={username} />\n        <div className=\"profile-container\">\n            <form onSubmit={updateUsername} className=\"update-username-form\">\n                <label>\n                    New Username:\n                    <input\n                        type=\"text\"\n                        value={newName}\n                        onChange={(e) => setNewName(e.target.value)}\n                        placeholder=\"Enter new username\"\n                    />\n                </label>\n                <button type=\"submit\">Update Username</button>\n            </form>\n            <form onSubmit={updatePassword} className=\"update-password-form\">\n                <label>\n                    New Password:\n                    <input\n                        type=\"password\"\n                        value={newPassword}\n                        onChange={(e) => setNewPassword(e.target.value)}\n                        placeholder=\"New password\"\n                    />\n                </label>\n                <label>\n                    Confirm Password:\n                    <input\n                        type=\"password\"\n                        value={confirmPassword}\n                        onChange={(e) => setConfirmPassword(e.target.value)}\n                        placeholder=\"Confirm new password\"\n                    />\n                </label>\n                <button type=\"submit\">Update Password</button>\n            </form>\n            {message && <p>{message}</p>}\n        </div>\n      </>\n    );\n}\n\nexport default Profile;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}