{"ast":null,"code":"// MessageThread.jsx\nimport React,{useEffect,useState}from'react';import{useNavigate}from'react-router-dom';import{useParams}from'react-router-dom';import'../styles/messageThread.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function MessageThread(){const navigate=useNavigate();const{channelId}=useParams();const[messages,setMessages]=useState([]);const userid=sessionStorage.getItem(\"user_id\");const username=sessionStorage.getItem(\"username\");const apiKey=sessionStorage.getItem(\"\".concat(username,\"_api_key\"));useEffect(()=>{fetchMessages();const intervalId=setInterval(fetchMessages,5000);return()=>clearInterval(intervalId);},[channelId]);const fetchMessages=async()=>{try{const response=await fetch(\"http://127.0.0.1:5000/api/channels/\".concat(channelId,\"/messages\"),{method:'GET',headers:{'Content-Type':'application/json'}});const data=await response.json();console.log(\"data: \",data);if(data.Success){setMessages(data.message);// Assuming the last message in the array has the highest ID\nconst maxMessageId=data.message.reduce((maxId,message)=>Math.max(maxId,message.id),0);console.log(\"maxMessageId: \",maxMessageId);if(maxMessageId>0){markLastMessageAsSeen(maxMessageId);}}else{console.log('Failed to fetch messages');}}catch(error){console.error('Error fetching messages:',error);}};const handleMessageClick=message=>{console.log(\"Clicked message:\",message.content);navigate(\"/channel/\".concat(channelId,\"/message/\").concat(message.id));};const reactionTrack=async(emoji,replyMessageId)=>{try{const response=await fetch(\"http://127.0.0.1:5000/api/reactions/post\",{method:'POST',headers:{'Content-Type':'application/json','X-API-Key':apiKey},body:JSON.stringify({user_id:userid,message_id:replyMessageId,emoji:emoji})});const data=await response.json();if(data.Success){console.log(\"Reactions stored successfully: \",data.error);}else{console.log(\"Failed to save reactions\");}}catch(error){console.error('Error saving reactions: ',error);}};// for hovering emojis display user names\nconst[tooltip,setTooltip]=useState({visible:false,users:[],position:{x:0,y:0}});const fetchReactionUsers=async(emoji,messageId,event)=>{try{const response=await fetch(\"http://127.0.0.1:5000/api/reactions/\".concat(messageId,\"/\").concat(encodeURIComponent(emoji)),{method:'GET',headers:{'Content-Type':'application/json'}});const data=await response.json();if(data.Success){setTooltip({visible:true,users:data.users,position:{x:event.clientX,y:event.clientY}});}else{console.log(\"Failed to fetch users for reaction\");}}catch(error){console.error('Error fetching users for reaction: ',error);}};const Tooltip=_ref=>{let{users,position}=_ref;return/*#__PURE__*/_jsx(\"div\",{style:{position:'absolute',top:position.y,left:position.x,backgroundColor:'white',border:'1px solid black',padding:'10px',borderRadius:'5px',display:'flex',flexDirection:'column',zIndex:100},children:users.map((user,index)=>/*#__PURE__*/_jsx(\"span\",{children:user},index))});};// unread message\nconst markLastMessageAsSeen=async maxMessageId=>{try{const response=await fetch(\"http://127.0.0.1:5000/api/channels/\".concat(channelId,\"/messages/\").concat(maxMessageId,\"/mark_seen\"),{method:'POST',headers:{'Content-Type':'application/json','X-API-Key':apiKey},body:JSON.stringify({user_id:userid})});const data=await response.json();if(!data.Success){console.log(\"Failed to mark message as seen\",data.error);}}catch(error){console.error('Error marking message as seen:',error);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"message-thread\",children:[tooltip.visible&&/*#__PURE__*/_jsx(Tooltip,{users:tooltip.users,position:tooltip.position}),messages.length>0?messages.map(message=>/*#__PURE__*/_jsxs(\"div\",{className:\"message\",onClick:()=>handleMessageClick(message),children:[/*#__PURE__*/_jsxs(\"div\",{className:\"message-details\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"message-author\",children:[message.author,\":\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"message-content\",children:message.content}),/*#__PURE__*/_jsxs(\"div\",{className:\"replies-emojis-container\",children:[message.replies_count!==0&&/*#__PURE__*/_jsxs(\"div\",{className:\"message-replies_count\",children:[message.replies_count,\" Replies\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"message-emojis-left\",children:[...new Set(message.emojis)].map((emoji,index)=>/*#__PURE__*/_jsx(\"span\",{className:\"emoji\",onMouseEnter:e=>fetchReactionUsers(emoji,message.id,e),onMouseLeave:()=>setTooltip({...tooltip,visible:false}),children:emoji},index))})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"message-emojis\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"emoji\",onClick:()=>reactionTrack(\"ğŸ¤¯\",message.id),children:\"\\uD83E\\uDD2F\"}),/*#__PURE__*/_jsx(\"button\",{className:\"emoji\",onClick:()=>reactionTrack(\"ğŸ‘¿\",message.id),children:\"\\uD83D\\uDC7F\"})]})]},message.id)):/*#__PURE__*/_jsx(\"h3\",{children:\"No messages in this thread\"})]});}export default MessageThread;","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useParams","jsx","_jsx","jsxs","_jsxs","MessageThread","navigate","channelId","messages","setMessages","userid","sessionStorage","getItem","username","apiKey","concat","fetchMessages","intervalId","setInterval","clearInterval","response","fetch","method","headers","data","json","console","log","Success","message","maxMessageId","reduce","maxId","Math","max","id","markLastMessageAsSeen","error","handleMessageClick","content","reactionTrack","emoji","replyMessageId","body","JSON","stringify","user_id","message_id","tooltip","setTooltip","visible","users","position","x","y","fetchReactionUsers","messageId","event","encodeURIComponent","clientX","clientY","Tooltip","_ref","style","top","left","backgroundColor","border","padding","borderRadius","display","flexDirection","zIndex","children","map","user","index","className","length","onClick","author","replies_count","Set","emojis","onMouseEnter","e","onMouseLeave"],"sources":["/Users/wangchenhui/Desktop/final_project_belay/react/src/components/MessageThread.jsx"],"sourcesContent":["// MessageThread.jsx\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useParams } from 'react-router-dom';\nimport '../styles/messageThread.css';\n\nfunction MessageThread() {\n  const navigate = useNavigate();\n  const { channelId } = useParams(); \n  const [messages, setMessages] = useState([]); \n  const userid = sessionStorage.getItem(\"user_id\");\n  const username = sessionStorage.getItem(\"username\");\n  const apiKey = sessionStorage.getItem(`${username}_api_key`);\n\n  \n  useEffect(() => {\n    fetchMessages();\n\n    const intervalId = setInterval(fetchMessages, 5000);\n    return () => clearInterval(intervalId);\n  }, [channelId]); \n\n\n  const fetchMessages = async () => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/api/channels/${channelId}/messages`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      const data = await response.json();\n      console.log(\"data: \", data);\n      if (data.Success) {\n        setMessages(data.message);\n        // Assuming the last message in the array has the highest ID\n        const maxMessageId = data.message.reduce((maxId, message) => Math.max(maxId, message.id), 0);\n        console.log(\"maxMessageId: \", maxMessageId);\n        if (maxMessageId > 0) {\n          markLastMessageAsSeen(maxMessageId);\n        }\n      } else {\n        console.log('Failed to fetch messages');\n      }\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n  \n\n\n  const handleMessageClick = (message) => {\n    console.log(\"Clicked message:\", message.content);\n    navigate(`/channel/${channelId}/message/${message.id}`);\n  };\n\n\n  const reactionTrack = async (emoji, replyMessageId) => {\n    \n    try {\n      const response = await fetch(`http://127.0.0.1:5000/api/reactions/post`,{\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-API-Key': apiKey\n        },\n        body: JSON.stringify({\n          user_id: userid,\n          message_id: replyMessageId,\n          emoji: emoji\n        }),\n      });\n      const data = await response.json();\n      if (data.Success) {\n        console.log(\"Reactions stored successfully: \", data.error);\n      } else {\n        console.log(\"Failed to save reactions\")\n      }\n    } catch (error) {\n      console.error('Error saving reactions: ', error);\n    }\n  };\n\n\n  // for hovering emojis display user names\n  const [tooltip, setTooltip] = useState({ visible: false, users: [], position: { x: 0, y: 0 } });\n\n  const fetchReactionUsers = async (emoji, messageId, event) => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/api/reactions/${messageId}/${encodeURIComponent(emoji)}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      const data = await response.json();\n      if (data.Success) {\n        setTooltip({\n          visible: true,\n          users: data.users,\n          position: { x: event.clientX, y: event.clientY }\n        });\n      } else {\n        console.log(\"Failed to fetch users for reaction\");\n      }\n    } catch (error) {\n      console.error('Error fetching users for reaction: ', error);\n    }\n  };\n  \n  const Tooltip = ({ users, position }) => {\n    return (\n      <div style={{ position: 'absolute', top: position.y, left: position.x, backgroundColor: 'white', border: '1px solid black', padding: '10px', borderRadius: '5px', display: 'flex', flexDirection: 'column', zIndex: 100 }}>\n        {users.map((user, index) => (\n          <span key={index}>{user}</span>\n        ))}\n      </div>\n    );\n  };\n\n\n  // unread message\n  const markLastMessageAsSeen = async (maxMessageId) => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/api/channels/${channelId}/messages/${maxMessageId}/mark_seen`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-API-Key': apiKey\n        },\n        body: JSON.stringify({\n          user_id: userid,\n        }),\n      });\n      const data = await response.json();\n      if (!data.Success) {\n        console.log(\"Failed to mark message as seen\", data.error);\n      }\n    } catch (error) {\n      console.error('Error marking message as seen:', error);\n    }\n  };\n  \n\n  return (\n    <div className=\"message-thread\">\n      {/* Messages */}\n      {tooltip.visible && <Tooltip users={tooltip.users} position={tooltip.position} />}\n      \n      {messages.length > 0 ? (\n        messages.map((message) => (\n          \n          \n          <div key={message.id} className=\"message\" onClick={() => handleMessageClick(message)}>\n            <div className=\"message-details\">\n              <div className=\"message-author\">{message.author}:</div>\n              <div className=\"message-content\">{message.content}</div>\n              <div className=\"replies-emojis-container\">\n                {message.replies_count !== 0 && (\n                  <div className=\"message-replies_count\">{message.replies_count} Replies</div>\n                )}\n                <div className=\"message-emojis-left\">\n                  {[...new Set(message.emojis)].map((emoji, index) => (\n                    <span key={index} className=\"emoji\" onMouseEnter={(e) => fetchReactionUsers(emoji, message.id, e)} onMouseLeave={() => setTooltip({ ...tooltip, visible: false })}>\n                      {emoji}\n                    </span>\n                  ))}\n                </div>\n              </div>\n            </div>\n            <div className=\"message-emojis\">\n              <button className='emoji' onClick={() => reactionTrack(\"ğŸ¤¯\", message.id)}>ğŸ¤¯</button>\n              <button className='emoji' onClick={() => reactionTrack(\"ğŸ‘¿\", message.id)}>ğŸ‘¿</button>\n            </div>\n          </div>\n        ))\n      ) : (\n        <h3>No messages in this thread</h3>\n      )}\n    </div>\n  );\n}\n\nexport default MessageThread;\n\n\n"],"mappings":"AAAA;AACA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,OAASC,WAAW,KAAQ,kBAAkB,CAC9C,OAASC,SAAS,KAAQ,kBAAkB,CAC5C,MAAO,6BAA6B,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAErC,QAAS,CAAAC,aAAaA,CAAA,CAAG,CACvB,KAAM,CAAAC,QAAQ,CAAGP,WAAW,CAAC,CAAC,CAC9B,KAAM,CAAEQ,SAAU,CAAC,CAAGP,SAAS,CAAC,CAAC,CACjC,KAAM,CAACQ,QAAQ,CAAEC,WAAW,CAAC,CAAGX,QAAQ,CAAC,EAAE,CAAC,CAC5C,KAAM,CAAAY,MAAM,CAAGC,cAAc,CAACC,OAAO,CAAC,SAAS,CAAC,CAChD,KAAM,CAAAC,QAAQ,CAAGF,cAAc,CAACC,OAAO,CAAC,UAAU,CAAC,CACnD,KAAM,CAAAE,MAAM,CAAGH,cAAc,CAACC,OAAO,IAAAG,MAAA,CAAIF,QAAQ,YAAU,CAAC,CAG5DhB,SAAS,CAAC,IAAM,CACdmB,aAAa,CAAC,CAAC,CAEf,KAAM,CAAAC,UAAU,CAAGC,WAAW,CAACF,aAAa,CAAE,IAAI,CAAC,CACnD,MAAO,IAAMG,aAAa,CAACF,UAAU,CAAC,CACxC,CAAC,CAAE,CAACV,SAAS,CAAC,CAAC,CAGf,KAAM,CAAAS,aAAa,CAAG,KAAAA,CAAA,GAAY,CAChC,GAAI,CACF,KAAM,CAAAI,QAAQ,CAAG,KAAM,CAAAC,KAAK,uCAAAN,MAAA,CAAuCR,SAAS,cAAa,CACvFe,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CACF,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAJ,QAAQ,CAACK,IAAI,CAAC,CAAC,CAClCC,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAEH,IAAI,CAAC,CAC3B,GAAIA,IAAI,CAACI,OAAO,CAAE,CAChBnB,WAAW,CAACe,IAAI,CAACK,OAAO,CAAC,CACzB;AACA,KAAM,CAAAC,YAAY,CAAGN,IAAI,CAACK,OAAO,CAACE,MAAM,CAAC,CAACC,KAAK,CAAEH,OAAO,GAAKI,IAAI,CAACC,GAAG,CAACF,KAAK,CAAEH,OAAO,CAACM,EAAE,CAAC,CAAE,CAAC,CAAC,CAC5FT,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAEG,YAAY,CAAC,CAC3C,GAAIA,YAAY,CAAG,CAAC,CAAE,CACpBM,qBAAqB,CAACN,YAAY,CAAC,CACrC,CACF,CAAC,IAAM,CACLJ,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC,CACzC,CACF,CAAE,MAAOU,KAAK,CAAE,CACdX,OAAO,CAACW,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAAC,CAClD,CACF,CAAC,CAID,KAAM,CAAAC,kBAAkB,CAAIT,OAAO,EAAK,CACtCH,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAEE,OAAO,CAACU,OAAO,CAAC,CAChDjC,QAAQ,aAAAS,MAAA,CAAaR,SAAS,cAAAQ,MAAA,CAAYc,OAAO,CAACM,EAAE,CAAE,CAAC,CACzD,CAAC,CAGD,KAAM,CAAAK,aAAa,CAAG,KAAAA,CAAOC,KAAK,CAAEC,cAAc,GAAK,CAErD,GAAI,CACF,KAAM,CAAAtB,QAAQ,CAAG,KAAM,CAAAC,KAAK,4CAA4C,CACtEC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAAkB,CAClC,WAAW,CAAET,MACf,CAAC,CACD6B,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACnBC,OAAO,CAAEpC,MAAM,CACfqC,UAAU,CAAEL,cAAc,CAC1BD,KAAK,CAAEA,KACT,CAAC,CACH,CAAC,CAAC,CACF,KAAM,CAAAjB,IAAI,CAAG,KAAM,CAAAJ,QAAQ,CAACK,IAAI,CAAC,CAAC,CAClC,GAAID,IAAI,CAACI,OAAO,CAAE,CAChBF,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAEH,IAAI,CAACa,KAAK,CAAC,CAC5D,CAAC,IAAM,CACLX,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC,CACzC,CACF,CAAE,MAAOU,KAAK,CAAE,CACdX,OAAO,CAACW,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAAC,CAClD,CACF,CAAC,CAGD;AACA,KAAM,CAACW,OAAO,CAAEC,UAAU,CAAC,CAAGnD,QAAQ,CAAC,CAAEoD,OAAO,CAAE,KAAK,CAAEC,KAAK,CAAE,EAAE,CAAEC,QAAQ,CAAE,CAAEC,CAAC,CAAE,CAAC,CAAEC,CAAC,CAAE,CAAE,CAAE,CAAC,CAAC,CAE/F,KAAM,CAAAC,kBAAkB,CAAG,KAAAA,CAAOd,KAAK,CAAEe,SAAS,CAAEC,KAAK,GAAK,CAC5D,GAAI,CACF,KAAM,CAAArC,QAAQ,CAAG,KAAM,CAAAC,KAAK,wCAAAN,MAAA,CAAwCyC,SAAS,MAAAzC,MAAA,CAAI2C,kBAAkB,CAACjB,KAAK,CAAC,EAAI,CAC5GnB,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CACF,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAJ,QAAQ,CAACK,IAAI,CAAC,CAAC,CAClC,GAAID,IAAI,CAACI,OAAO,CAAE,CAChBqB,UAAU,CAAC,CACTC,OAAO,CAAE,IAAI,CACbC,KAAK,CAAE3B,IAAI,CAAC2B,KAAK,CACjBC,QAAQ,CAAE,CAAEC,CAAC,CAAEI,KAAK,CAACE,OAAO,CAAEL,CAAC,CAAEG,KAAK,CAACG,OAAQ,CACjD,CAAC,CAAC,CACJ,CAAC,IAAM,CACLlC,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC,CACnD,CACF,CAAE,MAAOU,KAAK,CAAE,CACdX,OAAO,CAACW,KAAK,CAAC,qCAAqC,CAAEA,KAAK,CAAC,CAC7D,CACF,CAAC,CAED,KAAM,CAAAwB,OAAO,CAAGC,IAAA,EAAyB,IAAxB,CAAEX,KAAK,CAAEC,QAAS,CAAC,CAAAU,IAAA,CAClC,mBACE5D,IAAA,QAAK6D,KAAK,CAAE,CAAEX,QAAQ,CAAE,UAAU,CAAEY,GAAG,CAAEZ,QAAQ,CAACE,CAAC,CAAEW,IAAI,CAAEb,QAAQ,CAACC,CAAC,CAAEa,eAAe,CAAE,OAAO,CAAEC,MAAM,CAAE,iBAAiB,CAAEC,OAAO,CAAE,MAAM,CAAEC,YAAY,CAAE,KAAK,CAAEC,OAAO,CAAE,MAAM,CAAEC,aAAa,CAAE,QAAQ,CAAEC,MAAM,CAAE,GAAI,CAAE,CAAAC,QAAA,CACvNtB,KAAK,CAACuB,GAAG,CAAC,CAACC,IAAI,CAAEC,KAAK,gBACrB1E,IAAA,SAAAuE,QAAA,CAAmBE,IAAI,EAAZC,KAAmB,CAC/B,CAAC,CACC,CAAC,CAEV,CAAC,CAGD;AACA,KAAM,CAAAxC,qBAAqB,CAAG,KAAO,CAAAN,YAAY,EAAK,CACpD,GAAI,CACF,KAAM,CAAAV,QAAQ,CAAG,KAAM,CAAAC,KAAK,uCAAAN,MAAA,CAAuCR,SAAS,eAAAQ,MAAA,CAAae,YAAY,eAAc,CACjHR,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAAkB,CAClC,WAAW,CAAET,MACf,CAAC,CACD6B,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACnBC,OAAO,CAAEpC,MACX,CAAC,CACH,CAAC,CAAC,CACF,KAAM,CAAAc,IAAI,CAAG,KAAM,CAAAJ,QAAQ,CAACK,IAAI,CAAC,CAAC,CAClC,GAAI,CAACD,IAAI,CAACI,OAAO,CAAE,CACjBF,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAEH,IAAI,CAACa,KAAK,CAAC,CAC3D,CACF,CAAE,MAAOA,KAAK,CAAE,CACdX,OAAO,CAACW,KAAK,CAAC,gCAAgC,CAAEA,KAAK,CAAC,CACxD,CACF,CAAC,CAGD,mBACEjC,KAAA,QAAKyE,SAAS,CAAC,gBAAgB,CAAAJ,QAAA,EAE5BzB,OAAO,CAACE,OAAO,eAAIhD,IAAA,CAAC2D,OAAO,EAACV,KAAK,CAAEH,OAAO,CAACG,KAAM,CAACC,QAAQ,CAAEJ,OAAO,CAACI,QAAS,CAAE,CAAC,CAEhF5C,QAAQ,CAACsE,MAAM,CAAG,CAAC,CAClBtE,QAAQ,CAACkE,GAAG,CAAE7C,OAAO,eAGnBzB,KAAA,QAAsByE,SAAS,CAAC,SAAS,CAACE,OAAO,CAAEA,CAAA,GAAMzC,kBAAkB,CAACT,OAAO,CAAE,CAAA4C,QAAA,eACnFrE,KAAA,QAAKyE,SAAS,CAAC,iBAAiB,CAAAJ,QAAA,eAC9BrE,KAAA,QAAKyE,SAAS,CAAC,gBAAgB,CAAAJ,QAAA,EAAE5C,OAAO,CAACmD,MAAM,CAAC,GAAC,EAAK,CAAC,cACvD9E,IAAA,QAAK2E,SAAS,CAAC,iBAAiB,CAAAJ,QAAA,CAAE5C,OAAO,CAACU,OAAO,CAAM,CAAC,cACxDnC,KAAA,QAAKyE,SAAS,CAAC,0BAA0B,CAAAJ,QAAA,EACtC5C,OAAO,CAACoD,aAAa,GAAK,CAAC,eAC1B7E,KAAA,QAAKyE,SAAS,CAAC,uBAAuB,CAAAJ,QAAA,EAAE5C,OAAO,CAACoD,aAAa,CAAC,UAAQ,EAAK,CAC5E,cACD/E,IAAA,QAAK2E,SAAS,CAAC,qBAAqB,CAAAJ,QAAA,CACjC,CAAC,GAAG,GAAI,CAAAS,GAAG,CAACrD,OAAO,CAACsD,MAAM,CAAC,CAAC,CAACT,GAAG,CAAC,CAACjC,KAAK,CAAEmC,KAAK,gBAC7C1E,IAAA,SAAkB2E,SAAS,CAAC,OAAO,CAACO,YAAY,CAAGC,CAAC,EAAK9B,kBAAkB,CAACd,KAAK,CAAEZ,OAAO,CAACM,EAAE,CAAEkD,CAAC,CAAE,CAACC,YAAY,CAAEA,CAAA,GAAMrC,UAAU,CAAC,CAAE,GAAGD,OAAO,CAAEE,OAAO,CAAE,KAAM,CAAC,CAAE,CAAAuB,QAAA,CAC/JhC,KAAK,EADGmC,KAEL,CACP,CAAC,CACC,CAAC,EACH,CAAC,EACH,CAAC,cACNxE,KAAA,QAAKyE,SAAS,CAAC,gBAAgB,CAAAJ,QAAA,eAC7BvE,IAAA,WAAQ2E,SAAS,CAAC,OAAO,CAACE,OAAO,CAAEA,CAAA,GAAMvC,aAAa,CAAC,IAAI,CAAEX,OAAO,CAACM,EAAE,CAAE,CAAAsC,QAAA,CAAC,cAAE,CAAQ,CAAC,cACrFvE,IAAA,WAAQ2E,SAAS,CAAC,OAAO,CAACE,OAAO,CAAEA,CAAA,GAAMvC,aAAa,CAAC,IAAI,CAAEX,OAAO,CAACM,EAAE,CAAE,CAAAsC,QAAA,CAAC,cAAE,CAAQ,CAAC,EAClF,CAAC,GApBE5C,OAAO,CAACM,EAqBb,CACN,CAAC,cAEFjC,IAAA,OAAAuE,QAAA,CAAI,4BAA0B,CAAI,CACnC,EACE,CAAC,CAEV,CAEA,cAAe,CAAApE,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}