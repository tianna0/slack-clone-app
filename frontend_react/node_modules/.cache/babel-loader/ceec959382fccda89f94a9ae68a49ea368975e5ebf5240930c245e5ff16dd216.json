{"ast":null,"code":"var _jsxFileName = \"/Users/wangchenhui/Desktop/final_project_belay/react/src/components/MessageThread.jsx\",\n  _s = $RefreshSig$();\n// MessageThread.jsx\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useParams } from 'react-router-dom';\nimport '../styles/messageThread.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MessageThread() {\n  _s();\n  const navigate = useNavigate();\n  const {\n    channelId\n  } = useParams();\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    fetchMessages();\n\n    // Set up an interval to fetch messages every 500ms\n    const intervalId = setInterval(fetchMessages, 1000);\n\n    // Cleanup function to clear the interval when the component unmounts\n    // or if the channelId changes\n    return () => clearInterval(intervalId);\n  }, [channelId]);\n  const fetchMessages = async () => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/api/channels/${channelId}/messages`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = await response.json();\n      if (data.Success) {\n        setMessages(data.message);\n      } else {\n        console.log('Failed to fetch messages');\n      }\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n  const handleMessageClick = message => {\n    console.log(\"Clicked message:\", message.content);\n    navigate(`/channel/${channelId}/message/${message.id}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"message-thread\",\n    children: messages.length > 0 ? messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message\",\n      onClick: () => handleMessageClick(message),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-author\",\n        children: [message.author, \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-content\",\n        children: message.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this)]\n    }, message.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"No messages in this thread\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(MessageThread, \"7j+v1gmngLMGmivbQixi2MWC+NU=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = MessageThread;\nexport default MessageThread;\nvar _c;\n$RefreshReg$(_c, \"MessageThread\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useParams","jsxDEV","_jsxDEV","MessageThread","_s","navigate","channelId","messages","setMessages","fetchMessages","intervalId","setInterval","clearInterval","response","fetch","method","headers","data","json","Success","message","console","log","error","handleMessageClick","content","id","className","children","length","map","onClick","author","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/wangchenhui/Desktop/final_project_belay/react/src/components/MessageThread.jsx"],"sourcesContent":["// MessageThread.jsx\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useParams } from 'react-router-dom';\nimport '../styles/messageThread.css';\n\nfunction MessageThread() {\n  const navigate = useNavigate();\n  const { channelId } = useParams(); \n  const [messages, setMessages] = useState([]); \n\n  useEffect(() => {\n    fetchMessages();\n\n    // Set up an interval to fetch messages every 500ms\n    const intervalId = setInterval(fetchMessages, 1000);\n\n    // Cleanup function to clear the interval when the component unmounts\n    // or if the channelId changes\n    return () => clearInterval(intervalId);\n  }, [channelId]); \n\n\n  const fetchMessages = async () => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/api/channels/${channelId}/messages`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      const data = await response.json();\n      if (data.Success) {\n        setMessages(data.message); \n      } else {\n        console.log('Failed to fetch messages');\n      }\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n\n  const handleMessageClick = (message) => {\n    console.log(\"Clicked message:\", message.content);\n    navigate(`/channel/${channelId}/message/${message.id}`);\n  };\n\n  return (\n    <div className=\"message-thread\">\n      {messages.length > 0 ? (\n        messages.map((message) => (\n          <div key={message.id} className=\"message\" onClick={() => handleMessageClick(message)}>\n            <div className=\"message-author\">{message.author}:</div>\n            <div className=\"message-content\">{message.content}</div>\n          </div>\n        ))\n      ) : (\n        <h3>No messages in this thread</h3>\n      )}\n    </div>\n  );\n}\n\nexport default MessageThread;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}